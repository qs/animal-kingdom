{"ast":null,"code":"// Generated by IcedCoffeeScript 108.0.8\n(function () {\n  var BlockCipher,\n      G,\n      Global,\n      TwoFish,\n      scrub_vec,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function (child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  BlockCipher = require('./algbase').BlockCipher;\n  scrub_vec = require('./util').scrub_vec;\n\n  Global = function () {\n    function Global() {\n      this.P = [[0xA9, 0x67, 0xB3, 0xE8, 0x04, 0xFD, 0xA3, 0x76, 0x9A, 0x92, 0x80, 0x78, 0xE4, 0xDD, 0xD1, 0x38, 0x0D, 0xC6, 0x35, 0x98, 0x18, 0xF7, 0xEC, 0x6C, 0x43, 0x75, 0x37, 0x26, 0xFA, 0x13, 0x94, 0x48, 0xF2, 0xD0, 0x8B, 0x30, 0x84, 0x54, 0xDF, 0x23, 0x19, 0x5B, 0x3D, 0x59, 0xF3, 0xAE, 0xA2, 0x82, 0x63, 0x01, 0x83, 0x2E, 0xD9, 0x51, 0x9B, 0x7C, 0xA6, 0xEB, 0xA5, 0xBE, 0x16, 0x0C, 0xE3, 0x61, 0xC0, 0x8C, 0x3A, 0xF5, 0x73, 0x2C, 0x25, 0x0B, 0xBB, 0x4E, 0x89, 0x6B, 0x53, 0x6A, 0xB4, 0xF1, 0xE1, 0xE6, 0xBD, 0x45, 0xE2, 0xF4, 0xB6, 0x66, 0xCC, 0x95, 0x03, 0x56, 0xD4, 0x1C, 0x1E, 0xD7, 0xFB, 0xC3, 0x8E, 0xB5, 0xE9, 0xCF, 0xBF, 0xBA, 0xEA, 0x77, 0x39, 0xAF, 0x33, 0xC9, 0x62, 0x71, 0x81, 0x79, 0x09, 0xAD, 0x24, 0xCD, 0xF9, 0xD8, 0xE5, 0xC5, 0xB9, 0x4D, 0x44, 0x08, 0x86, 0xE7, 0xA1, 0x1D, 0xAA, 0xED, 0x06, 0x70, 0xB2, 0xD2, 0x41, 0x7B, 0xA0, 0x11, 0x31, 0xC2, 0x27, 0x90, 0x20, 0xF6, 0x60, 0xFF, 0x96, 0x5C, 0xB1, 0xAB, 0x9E, 0x9C, 0x52, 0x1B, 0x5F, 0x93, 0x0A, 0xEF, 0x91, 0x85, 0x49, 0xEE, 0x2D, 0x4F, 0x8F, 0x3B, 0x47, 0x87, 0x6D, 0x46, 0xD6, 0x3E, 0x69, 0x64, 0x2A, 0xCE, 0xCB, 0x2F, 0xFC, 0x97, 0x05, 0x7A, 0xAC, 0x7F, 0xD5, 0x1A, 0x4B, 0x0E, 0xA7, 0x5A, 0x28, 0x14, 0x3F, 0x29, 0x88, 0x3C, 0x4C, 0x02, 0xB8, 0xDA, 0xB0, 0x17, 0x55, 0x1F, 0x8A, 0x7D, 0x57, 0xC7, 0x8D, 0x74, 0xB7, 0xC4, 0x9F, 0x72, 0x7E, 0x15, 0x22, 0x12, 0x58, 0x07, 0x99, 0x34, 0x6E, 0x50, 0xDE, 0x68, 0x65, 0xBC, 0xDB, 0xF8, 0xC8, 0xA8, 0x2B, 0x40, 0xDC, 0xFE, 0x32, 0xA4, 0xCA, 0x10, 0x21, 0xF0, 0xD3, 0x5D, 0x0F, 0x00, 0x6F, 0x9D, 0x36, 0x42, 0x4A, 0x5E, 0xC1, 0xE0], [0x75, 0xF3, 0xC6, 0xF4, 0xDB, 0x7B, 0xFB, 0xC8, 0x4A, 0xD3, 0xE6, 0x6B, 0x45, 0x7D, 0xE8, 0x4B, 0xD6, 0x32, 0xD8, 0xFD, 0x37, 0x71, 0xF1, 0xE1, 0x30, 0x0F, 0xF8, 0x1B, 0x87, 0xFA, 0x06, 0x3F, 0x5E, 0xBA, 0xAE, 0x5B, 0x8A, 0x00, 0xBC, 0x9D, 0x6D, 0xC1, 0xB1, 0x0E, 0x80, 0x5D, 0xD2, 0xD5, 0xA0, 0x84, 0x07, 0x14, 0xB5, 0x90, 0x2C, 0xA3, 0xB2, 0x73, 0x4C, 0x54, 0x92, 0x74, 0x36, 0x51, 0x38, 0xB0, 0xBD, 0x5A, 0xFC, 0x60, 0x62, 0x96, 0x6C, 0x42, 0xF7, 0x10, 0x7C, 0x28, 0x27, 0x8C, 0x13, 0x95, 0x9C, 0xC7, 0x24, 0x46, 0x3B, 0x70, 0xCA, 0xE3, 0x85, 0xCB, 0x11, 0xD0, 0x93, 0xB8, 0xA6, 0x83, 0x20, 0xFF, 0x9F, 0x77, 0xC3, 0xCC, 0x03, 0x6F, 0x08, 0xBF, 0x40, 0xE7, 0x2B, 0xE2, 0x79, 0x0C, 0xAA, 0x82, 0x41, 0x3A, 0xEA, 0xB9, 0xE4, 0x9A, 0xA4, 0x97, 0x7E, 0xDA, 0x7A, 0x17, 0x66, 0x94, 0xA1, 0x1D, 0x3D, 0xF0, 0xDE, 0xB3, 0x0B, 0x72, 0xA7, 0x1C, 0xEF, 0xD1, 0x53, 0x3E, 0x8F, 0x33, 0x26, 0x5F, 0xEC, 0x76, 0x2A, 0x49, 0x81, 0x88, 0xEE, 0x21, 0xC4, 0x1A, 0xEB, 0xD9, 0xC5, 0x39, 0x99, 0xCD, 0xAD, 0x31, 0x8B, 0x01, 0x18, 0x23, 0xDD, 0x1F, 0x4E, 0x2D, 0xF9, 0x48, 0x4F, 0xF2, 0x65, 0x8E, 0x78, 0x5C, 0x58, 0x19, 0x8D, 0xE5, 0x98, 0x57, 0x67, 0x7F, 0x05, 0x64, 0xAF, 0x63, 0xB6, 0xFE, 0xF5, 0xB7, 0x3C, 0xA5, 0xCE, 0xE9, 0x68, 0x44, 0xE0, 0x4D, 0x43, 0x69, 0x29, 0x2E, 0xAC, 0x15, 0x59, 0xA8, 0x0A, 0x9E, 0x6E, 0x47, 0xDF, 0x34, 0x35, 0x6A, 0xCF, 0xDC, 0x22, 0xC9, 0xC0, 0x9B, 0x89, 0xD4, 0xED, 0xAB, 0x12, 0xA2, 0x0D, 0x52, 0xBB, 0x02, 0x2F, 0xA9, 0xD7, 0x61, 0x1E, 0xB4, 0x50, 0x04, 0xF6, 0xC2, 0x16, 0x25, 0x86, 0x56, 0x55, 0x09, 0xBE, 0x91]];\n      this.P_00 = 1;\n      this.P_01 = 0;\n      this.P_02 = 0;\n      this.P_03 = 1;\n      this.P_04 = 1;\n      this.P_10 = 0;\n      this.P_11 = 0;\n      this.P_12 = 1;\n      this.P_13 = 1;\n      this.P_14 = 0;\n      this.P_20 = 1;\n      this.P_21 = 1;\n      this.P_22 = 0;\n      this.P_23 = 0;\n      this.P_24 = 0;\n      this.P_30 = 0;\n      this.P_31 = 1;\n      this.P_32 = 1;\n      this.P_33 = 0;\n      this.P_34 = 1;\n      this.GF256_FDBK = 0x169;\n      this.GF256_FDBK_2 = this.GF256_FDBK / 2;\n      this.GF256_FDBK_4 = this.GF256_FDBK / 4;\n      this.RS_GF_FDBK = 0x14D;\n      this.SK_STEP = 0x02020202;\n      this.SK_BUMP = 0x01010101;\n      this.SK_ROTL = 9;\n    }\n\n    return Global;\n  }();\n\n  G = new Global();\n\n  exports.TwoFish = TwoFish = function (_super) {\n    __extends(TwoFish, _super);\n\n    TwoFish.blockSize = 4 * 4;\n    TwoFish.prototype.blockSize = TwoFish.blockSize;\n    TwoFish.keySize = 256 / 8;\n    TwoFish.prototype.keySize = TwoFish.keySize;\n    TwoFish.ivSize = TwoFish.blockSize;\n    TwoFish.prototype.ivSize = TwoFish.ivSize;\n\n    function TwoFish(key) {\n      this._key = key.clone();\n      this.gMDS0 = [];\n      this.gMDS1 = [];\n      this.gMDS2 = [];\n      this.gMDS3 = [];\n      this.gSubKeys = [];\n      this.gSBox = [];\n      this.k64Cnt = 0;\n\n      this._doReset();\n    }\n\n    TwoFish.prototype.getByte = function (x, n) {\n      return x >>> n * 8 & 0xFF;\n    };\n\n    TwoFish.prototype.switchEndianness = function (word) {\n      return (word & 0xff) << 24 | (word >> 8 & 0xff) << 16 | (word >> 16 & 0xff) << 8 | word >> 24 & 0xff;\n    };\n\n    TwoFish.prototype.LFSR1 = function (x) {\n      return x >> 1 ^ ((x & 0x01) !== 0 ? G.GF256_FDBK_2 : 0);\n    };\n\n    TwoFish.prototype.LFSR2 = function (x) {\n      return x >> 2 ^ ((x & 0x02) !== 0 ? G.GF256_FDBK_2 : 0) ^ ((x & 0x01) !== 0 ? G.GF256_FDBK_4 : 0);\n    };\n\n    TwoFish.prototype.Mx_X = function (x) {\n      return x ^ this.LFSR2(x);\n    };\n\n    TwoFish.prototype.Mx_Y = function (x) {\n      return x ^ this.LFSR1(x) ^ this.LFSR2(x);\n    };\n\n    TwoFish.prototype.RS_rem = function (x) {\n      var b, g2, g3;\n      b = x >>> 24 & 0xff;\n      g2 = (b << 1 ^ ((b & 0x80) !== 0 ? G.RS_GF_FDBK : 0)) & 0xff;\n      g3 = b >>> 1 ^ ((b & 0x01) !== 0 ? G.RS_GF_FDBK >>> 1 : 0) ^ g2;\n      return x << 8 ^ g3 << 24 ^ g2 << 16 ^ g3 << 8 ^ b;\n    };\n\n    TwoFish.prototype.RS_MDS_Encode = function (k0, k1) {\n      var i, r, _i, _j;\n\n      r = k1;\n\n      for (i = _i = 0; _i < 4; i = ++_i) {\n        r = this.RS_rem(r);\n      }\n\n      r ^= k0;\n\n      for (i = _j = 0; _j < 4; i = ++_j) {\n        r = this.RS_rem(r);\n      }\n\n      return r;\n    };\n\n    TwoFish.prototype.F32 = function (x, k32) {\n      var b0, b1, b2, b3, k0, k1, k2, k3, m, res;\n      b0 = this.getByte(x, 0);\n      b1 = this.getByte(x, 1);\n      b2 = this.getByte(x, 2);\n      b3 = this.getByte(x, 3);\n      k0 = k32[0];\n      k1 = k32[1];\n      k2 = k32[2];\n      k3 = k32[3];\n      m = this.k64Cnt & 3;\n      res = m === 1 ? this.gMDS0[G.P[G.P_01][b0] & 0xff ^ this.getByte(k0, 0)] ^ this.gMDS1[G.P[G.P_11][b1] & 0xff ^ this.getByte(k0, 1)] ^ this.gMDS2[G.P[G.P_21][b2] & 0xff ^ this.getByte(k0, 2)] ^ this.gMDS3[G.P[G.P_31][b3] & 0xff ^ this.getByte(k0, 3)] : (m === 0 ? (b0 = G.P[G.P_04][b0] & 0xff ^ this.getByte(k3, 0), b1 = G.P[G.P_14][b1] & 0xff ^ this.getByte(k3, 1), b2 = G.P[G.P_24][b2] & 0xff ^ this.getByte(k3, 2), b3 = G.P[G.P_34][b3] & 0xff ^ this.getByte(k3, 3)) : void 0, m === 0 || m === 3 ? (b0 = G.P[G.P_03][b0] & 0xff ^ this.getByte(k2, 0), b1 = G.P[G.P_13][b1] & 0xff ^ this.getByte(k2, 1), b2 = G.P[G.P_23][b2] & 0xff ^ this.getByte(k2, 2), b3 = G.P[G.P_33][b3] & 0xff ^ this.getByte(k2, 3)) : void 0, this.gMDS0[G.P[G.P_01][G.P[G.P_02][b0] & 0xff ^ this.getByte(k1, 0)] & 0xff ^ this.getByte(k0, 0)] ^ this.gMDS1[G.P[G.P_11][G.P[G.P_12][b1] & 0xff ^ this.getByte(k1, 1)] & 0xff ^ this.getByte(k0, 1)] ^ this.gMDS2[G.P[G.P_21][G.P[G.P_22][b2] & 0xff ^ this.getByte(k1, 2)] & 0xff ^ this.getByte(k0, 2)] ^ this.gMDS3[G.P[G.P_31][G.P[G.P_32][b3] & 0xff ^ this.getByte(k1, 3)] & 0xff ^ this.getByte(k0, 3)]);\n      return res;\n    };\n\n    TwoFish.prototype.Fe32_0 = function (x) {\n      return this.gSBox[0x000 + 2 * (x & 0xff)] ^ this.gSBox[0x001 + 2 * (x >>> 8 & 0xff)] ^ this.gSBox[0x200 + 2 * (x >>> 16 & 0xff)] ^ this.gSBox[0x201 + 2 * (x >>> 24 & 0xff)];\n    };\n\n    TwoFish.prototype.Fe32_3 = function (x) {\n      return this.gSBox[0x000 + 2 * (x >>> 24 & 0xff)] ^ this.gSBox[0x001 + 2 * (x & 0xff)] ^ this.gSBox[0x200 + 2 * (x >>> 8 & 0xff)] ^ this.gSBox[0x201 + 2 * (x >>> 16 & 0xff)];\n    };\n\n    TwoFish.prototype._doReset = function () {\n      var A, B, b0, b1, b2, b3, i, j, k0, k1, k2, k3, k32e, k32o, m, m1, mX, mY, p, q, sBoxKeys, _i, _j, _k, _l, _ref, _ref1, _results;\n\n      k32e = [];\n      k32o = [];\n      sBoxKeys = [];\n      m1 = [];\n      mX = [];\n      mY = [];\n      this.k64Cnt = this._key.words.length / 2;\n\n      if (this.k64Cnt < 1) {\n        throw \"Key size less than 64 bits\";\n      }\n\n      if (this.k64Cnt > 4) {\n        throw \"Key size larger than 256 bits\";\n      }\n\n      for (i = _i = 0; _i < 256; i = ++_i) {\n        j = G.P[0][i] & 0xff;\n        m1[0] = j;\n        mX[0] = this.Mx_X(j) & 0xff;\n        mY[0] = this.Mx_Y(j) & 0xff;\n        j = G.P[1][i] & 0xff;\n        m1[1] = j;\n        mX[1] = this.Mx_X(j) & 0xff;\n        mY[1] = this.Mx_Y(j) & 0xff;\n        this.gMDS0[i] = m1[G.P_00] | mX[G.P_00] << 8 | mY[G.P_00] << 16 | mY[G.P_00] << 24;\n        this.gMDS1[i] = mY[G.P_10] | mY[G.P_10] << 8 | mX[G.P_10] << 16 | m1[G.P_10] << 24;\n        this.gMDS2[i] = mX[G.P_20] | mY[G.P_20] << 8 | m1[G.P_20] << 16 | mY[G.P_20] << 24;\n        this.gMDS3[i] = mX[G.P_30] | m1[G.P_30] << 8 | mY[G.P_30] << 16 | mX[G.P_30] << 24;\n      }\n\n      for (i = _j = 0, _ref = this.k64Cnt; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {\n        p = i * 2;\n        k32e[i] = this.switchEndianness(this._key.words[p]);\n        k32o[i] = this.switchEndianness(this._key.words[p + 1]);\n        sBoxKeys[this.k64Cnt - 1 - i] = this.RS_MDS_Encode(k32e[i], k32o[i]);\n      }\n\n      for (i = _k = 0, _ref1 = 40 / 2; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; i = 0 <= _ref1 ? ++_k : --_k) {\n        q = i * G.SK_STEP;\n        A = this.F32(q, k32e);\n        B = this.F32(q + G.SK_BUMP, k32o);\n        B = B << 8 | B >>> 24;\n        A += B;\n        this.gSubKeys[i * 2] = A;\n        A += B;\n        this.gSubKeys[i * 2 + 1] = A << G.SK_ROTL | A >>> 32 - G.SK_ROTL;\n      }\n\n      k0 = sBoxKeys[0];\n      k1 = sBoxKeys[1];\n      k2 = sBoxKeys[2];\n      k3 = sBoxKeys[3];\n      this.gSBox = [];\n      _results = [];\n\n      for (i = _l = 0; _l < 256; i = ++_l) {\n        b0 = b1 = b2 = b3 = i;\n        m = this.k64Cnt & 3;\n\n        if (m === 1) {\n          this.gSBox[i * 2] = this.gMDS0[G.P[G.P_01][b0] & 0xff ^ this.getByte(k0, 0)];\n          this.gSBox[i * 2 + 1] = this.gMDS1[G.P[G.P_11][b1] & 0xff ^ this.getByte(k0, 1)];\n          this.gSBox[i * 2 + 0x200] = this.gMDS2[G.P[G.P_21][b2] & 0xff ^ this.getByte(k0, 2)];\n\n          _results.push(this.gSBox[i * 2 + 0x201] = this.gMDS3[G.P[G.P_31][b3] & 0xff ^ this.getByte(k0, 3)]);\n        } else {\n          if (m === 0) {\n            b0 = G.P[G.P_04][b0] & 0xff ^ this.getByte(k3, 0);\n            b1 = G.P[G.P_14][b1] & 0xff ^ this.getByte(k3, 1);\n            b2 = G.P[G.P_24][b2] & 0xff ^ this.getByte(k3, 2);\n            b3 = G.P[G.P_34][b3] & 0xff ^ this.getByte(k3, 3);\n          }\n\n          if (m === 0 || m === 3) {\n            b0 = G.P[G.P_03][b0] & 0xff ^ this.getByte(k2, 0);\n            b1 = G.P[G.P_13][b1] & 0xff ^ this.getByte(k2, 1);\n            b2 = G.P[G.P_23][b2] & 0xff ^ this.getByte(k2, 2);\n            b3 = G.P[G.P_33][b3] & 0xff ^ this.getByte(k2, 3);\n          }\n\n          this.gSBox[i * 2] = this.gMDS0[G.P[G.P_01][G.P[G.P_02][b0] & 0xff ^ this.getByte(k1, 0)] & 0xff ^ this.getByte(k0, 0)];\n          this.gSBox[i * 2 + 1] = this.gMDS1[G.P[G.P_11][G.P[G.P_12][b1] & 0xff ^ this.getByte(k1, 1)] & 0xff ^ this.getByte(k0, 1)];\n          this.gSBox[i * 2 + 0x200] = this.gMDS2[G.P[G.P_21][G.P[G.P_22][b2] & 0xff ^ this.getByte(k1, 2)] & 0xff ^ this.getByte(k0, 2)];\n\n          _results.push(this.gSBox[i * 2 + 0x201] = this.gMDS3[G.P[G.P_31][G.P[G.P_32][b3] & 0xff ^ this.getByte(k1, 3)] & 0xff ^ this.getByte(k0, 3)]);\n        }\n      }\n\n      return _results;\n    };\n\n    TwoFish.prototype.scrub = function () {\n      scrub_vec(this.gSubKeys);\n      scrub_vec(this.gSBox);\n      return this._key.scrub();\n    };\n\n    TwoFish.prototype.decryptBlock = function (M, offset) {\n      var k, r, t0, t1, x0, x1, x2, x3, _i;\n\n      if (offset == null) {\n        offset = 0;\n      }\n\n      x2 = this.switchEndianness(M[offset]) ^ this.gSubKeys[4];\n      x3 = this.switchEndianness(M[offset + 1]) ^ this.gSubKeys[5];\n      x0 = this.switchEndianness(M[offset + 2]) ^ this.gSubKeys[6];\n      x1 = this.switchEndianness(M[offset + 3]) ^ this.gSubKeys[7];\n      k = 8 + 2 * 16 - 1;\n\n      for (r = _i = 0; _i < 16; r = _i += 2) {\n        t0 = this.Fe32_0(x2);\n        t1 = this.Fe32_3(x3);\n        x1 ^= t0 + 2 * t1 + this.gSubKeys[k--];\n        x0 = (x0 << 1 | x0 >>> 31) ^ t0 + t1 + this.gSubKeys[k--];\n        x1 = x1 >>> 1 | x1 << 31;\n        t0 = this.Fe32_0(x0);\n        t1 = this.Fe32_3(x1);\n        x3 ^= t0 + 2 * t1 + this.gSubKeys[k--];\n        x2 = (x2 << 1 | x2 >>> 31) ^ t0 + t1 + this.gSubKeys[k--];\n        x3 = x3 >>> 1 | x3 << 31;\n      }\n\n      M[offset] = this.switchEndianness(x0 ^ this.gSubKeys[0]);\n      M[offset + 1] = this.switchEndianness(x1 ^ this.gSubKeys[1]);\n      M[offset + 2] = this.switchEndianness(x2 ^ this.gSubKeys[2]);\n      return M[offset + 3] = this.switchEndianness(x3 ^ this.gSubKeys[3]);\n    };\n\n    TwoFish.prototype.encryptBlock = function (M, offset) {\n      var k, r, t0, t1, x0, x1, x2, x3, _i;\n\n      if (offset == null) {\n        offset = 0;\n      }\n\n      x0 = this.switchEndianness(M[offset]) ^ this.gSubKeys[0];\n      x1 = this.switchEndianness(M[offset + 1]) ^ this.gSubKeys[1];\n      x2 = this.switchEndianness(M[offset + 2]) ^ this.gSubKeys[2];\n      x3 = this.switchEndianness(M[offset + 3]) ^ this.gSubKeys[3];\n      k = 8;\n\n      for (r = _i = 0; _i < 16; r = _i += 2) {\n        t0 = this.Fe32_0(x0);\n        t1 = this.Fe32_3(x1);\n        x2 ^= t0 + t1 + this.gSubKeys[k++];\n        x2 = x2 >>> 1 | x2 << 31;\n        x3 = (x3 << 1 | x3 >>> 31) ^ t0 + 2 * t1 + this.gSubKeys[k++];\n        t0 = this.Fe32_0(x2);\n        t1 = this.Fe32_3(x3);\n        x0 ^= t0 + t1 + this.gSubKeys[k++];\n        x0 = x0 >>> 1 | x0 << 31;\n        x1 = (x1 << 1 | x1 >>> 31) ^ t0 + 2 * t1 + this.gSubKeys[k++];\n      }\n\n      M[offset] = this.switchEndianness(x2 ^ this.gSubKeys[4]);\n      M[offset + 1] = this.switchEndianness(x3 ^ this.gSubKeys[5]);\n      M[offset + 2] = this.switchEndianness(x0 ^ this.gSubKeys[6]);\n      return M[offset + 3] = this.switchEndianness(x1 ^ this.gSubKeys[7]);\n    };\n\n    return TwoFish;\n  }(BlockCipher);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}