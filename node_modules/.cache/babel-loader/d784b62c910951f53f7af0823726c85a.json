{"ast":null,"code":"'use strict'; // <scriptSig> {serialized scriptPubKey script}\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst bscript = require('../../script');\n\nconst typeforce = require('typeforce');\n\nconst p2ms = require('../multisig');\n\nconst p2pk = require('../pubkey');\n\nconst p2pkh = require('../pubkeyhash');\n\nfunction check(chunks, allowIncomplete) {\n  typeforce(typeforce.Array, chunks);\n  if (chunks.length < 1) return false;\n  const witnessScript = chunks[chunks.length - 1];\n  if (!Buffer.isBuffer(witnessScript)) return false;\n  const witnessScriptChunks = bscript.decompile(witnessScript); // is witnessScript a valid script?\n\n  if (!witnessScriptChunks || witnessScriptChunks.length === 0) return false;\n  const witnessRawScriptSig = bscript.compile(chunks.slice(0, -1)); // match types\n\n  if (p2pkh.input.check(witnessRawScriptSig) && p2pkh.output.check(witnessScriptChunks)) return true;\n  if (p2ms.input.check(witnessRawScriptSig, allowIncomplete) && p2ms.output.check(witnessScriptChunks)) return true;\n  if (p2pk.input.check(witnessRawScriptSig) && p2pk.output.check(witnessScriptChunks)) return true;\n  return false;\n}\n\nexports.check = check;\n\ncheck.toJSON = () => {\n  return 'witnessScriptHash input';\n};","map":null,"metadata":{},"sourceType":"script"}