{"ast":null,"code":"// Generated by IcedCoffeeScript 108.0.11\n(function () {\n  var BaseError,\n      C,\n      Canceler,\n      EscErr,\n      EscOk,\n      c_to_camel,\n      copy_trace,\n      ipush,\n      make_error_klass,\n      make_errors,\n      make_esc,\n      to_lower,\n      util,\n      __slice = [].slice;\n  util = require('util');\n  C = require('iced-runtime')[\"const\"];\n\n  exports.BaseError = BaseError = function (msg, constructor) {\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    return this.message = msg || 'Error';\n  };\n\n  util.inherits(BaseError, Error);\n  BaseError.prototype.name = \"BaseError\";\n\n  to_lower = function (s) {\n    return s[0].toUpperCase() + s.slice(1).toLowerCase();\n  };\n\n  c_to_camel = function (s) {\n    var p;\n    return function () {\n      var _i, _len, _ref, _results;\n\n      _ref = s.split(/_/);\n      _results = [];\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        p = _ref[_i];\n\n        _results.push(to_lower(p));\n      }\n\n      return _results;\n    }().join('');\n  };\n\n  make_error_klass = function (k, code, default_msg) {\n    var ctor;\n\n    ctor = function (msg) {\n      BaseError.call(this, msg || default_msg, this.constructor);\n      this.istack = [];\n      this.code = code;\n      return this;\n    };\n\n    util.inherits(ctor, BaseError);\n    ctor.prototype.name = k;\n\n    ctor.prototype.inspect = function () {\n      return \"[\" + k + \": \" + this.message + \" (code \" + this.code + \")]\";\n    };\n\n    return ctor;\n  };\n\n  copy_trace = function (src, dst) {\n    dst[C.trace] = src[C.trace];\n    return dst;\n  };\n\n  exports.make_errors = make_errors = function (d) {\n    var enam, errno, k, msg, out, val;\n    out = {\n      msg: {},\n      name: {},\n      code: {}\n    };\n    d.OK = \"Success\";\n    errno = 100;\n\n    for (k in d) {\n      msg = d[k];\n\n      if (k !== \"OK\") {\n        enam = c_to_camel(k) + \"Error\";\n        val = errno++;\n        out[enam] = make_error_klass(enam, val, msg);\n      } else {\n        val = 0;\n      }\n\n      out[k] = val;\n      out.msg[k] = out.msg[val] = msg;\n      out.name[k] = out.name[val] = k;\n      out.code[k] = val;\n    }\n\n    return out;\n  };\n\n  ipush = function (e, msg) {\n    if (msg != null) {\n      if (e.istack == null) {\n        e.istack = [];\n      }\n\n      return e.istack.push(msg);\n    }\n  };\n\n  exports.make_esc = make_esc = function (gcb, where) {\n    var _ref;\n\n    if (where == null) {\n      where = (_ref = make_esc.caller) != null ? _ref.name : void 0;\n    }\n\n    return function (lcb) {\n      return copy_trace(lcb, function () {\n        var args, err;\n        err = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n\n        if (err == null) {\n          return lcb.apply(null, args);\n        } else if (!gcb.__esc) {\n          gcb.__esc = true;\n          ipush(err, where != null ? where : \"unnamed error\");\n          return gcb(err);\n        }\n      });\n    };\n  };\n\n  exports.EscOk = EscOk = function () {\n    function EscOk(gcb, where) {\n      this.gcb = gcb;\n      this.where = where;\n    }\n\n    EscOk.prototype.bailout = function () {\n      var t;\n\n      if (this.gcb) {\n        t = this.gcb;\n        this.gcb = null;\n        return t(false);\n      }\n    };\n\n    EscOk.prototype.check_ok = function (cb) {\n      return copy_trace(cb, function (_this) {\n        return function () {\n          var args, ok;\n          ok = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n\n          if (!ok) {\n            return _this.bailout();\n          } else {\n            return cb.apply(null, args);\n          }\n        };\n      }(this));\n    };\n\n    EscOk.prototype.check_err = function (cb) {\n      return copy_trace(cb, function (_this) {\n        return function () {\n          var args, err;\n          err = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n\n          if (err != null) {\n            ipush(err, _this.where);\n            return _this.bailout();\n          } else {\n            return cb.apply(null, args);\n          }\n        };\n      }(this));\n    };\n\n    EscOk.prototype.check_non_null = function (cb) {\n      return copy_trace(cb, function (_this) {\n        return function () {\n          var args;\n          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n\n          if (args[0] == null) {\n            return _this.bailout();\n          } else {\n            return cb.apply(null, args);\n          }\n        };\n      }(this));\n    };\n\n    return EscOk;\n  }();\n\n  exports.EscErr = EscErr = function () {\n    function EscErr(gcb, where) {\n      this.gcb = gcb;\n      this.where = where;\n    }\n\n    EscErr.prototype.finish = function (err) {\n      var t;\n\n      if (this.gcb) {\n        t = this.gcb;\n        this.gcb = null;\n        return t(err);\n      }\n    };\n\n    EscErr.prototype.check_ok = function (cb, eclass, emsg) {\n      if (eclass == null) {\n        eclass = Error;\n      }\n\n      if (emsg == null) {\n        emsg = null;\n      }\n\n      return copy_trace(cb, function () {\n        var args, err, ok;\n        ok = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n\n        if (!ok) {\n          err = new eclass(emsg);\n          ipush(err, this.where);\n          return this.finish(err);\n        } else {\n          return cb.apply(null, args);\n        }\n      });\n    };\n\n    EscErr.prototype.check_err = function (cb) {\n      return copy_trace(cb, function () {\n        var args, err;\n        err = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n\n        if (err != null) {\n          ipush(err, this.where);\n          return this.finish(err);\n        } else {\n          return cb.apply(null, args);\n        }\n      });\n    };\n\n    return EscErr;\n  }();\n\n  exports.Canceler = Canceler = function () {\n    function Canceler(klass) {\n      this.klass = klass != null ? klass : Error;\n      this._canceled = false;\n    }\n\n    Canceler.prototype.is_canceled = function () {\n      return this._canceled;\n    };\n\n    Canceler.prototype.is_ok = function () {\n      return !this._canceled;\n    };\n\n    Canceler.prototype.cancel = function () {\n      return this._canceled = true;\n    };\n\n    Canceler.prototype.err = function () {\n      if (this._canceled) {\n        return new this.klass(\"Aborted\");\n      } else {\n        return null;\n      }\n    };\n\n    return Canceler;\n  }();\n\n  exports.chain = function (cb, f) {\n    return function () {\n      var args;\n      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return f(function () {\n        return cb.apply(null, args);\n      });\n    };\n  };\n\n  exports.chain_err = function (cb, f) {\n    return function () {\n      var args0;\n      args0 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return f(function () {\n        var args1;\n        args1 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return cb.apply(null, args1[0] != null && !(args0[0] != null) ? args1 : args0);\n      });\n    };\n  };\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}