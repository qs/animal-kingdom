{"ast":null,"code":"// Generated by IcedCoffeeScript 108.0.8\n(function () {\n  var AES,\n      Base,\n      CURRENT_VERSION,\n      Concat,\n      Encryptor,\n      HMAC_SHA256,\n      PBKDF2,\n      SHA512,\n      Scrypt,\n      TwoFish,\n      V,\n      WordArray,\n      XOR,\n      ctr,\n      encrypt,\n      iced,\n      make_esc,\n      prng,\n      salsa20,\n      util,\n      __iced_k,\n      __iced_k_noop,\n      _ref,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function (child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  iced = require('iced-runtime');\n\n  __iced_k = __iced_k_noop = function () {};\n\n  WordArray = require('./wordarray').WordArray;\n  salsa20 = require('./salsa20');\n  AES = require('./aes').AES;\n  TwoFish = require('./twofish').TwoFish;\n  ctr = require('./ctr');\n  _ref = require('./combine'), XOR = _ref.XOR, Concat = _ref.Concat;\n  SHA512 = require('./sha512').SHA512;\n  PBKDF2 = require('./pbkdf2').PBKDF2;\n  Scrypt = require('./scrypt').Scrypt;\n  util = require('./util');\n  prng = require('./prng');\n  make_esc = require('iced-error').make_esc;\n  HMAC_SHA256 = require('./hmac').HMAC_SHA256;\n  V = {\n    \"1\": {\n      header: [0x1c94d7de, 1],\n      salt_size: 8,\n      xsalsa20_rev: true,\n      kdf: {\n        klass: PBKDF2,\n        opts: {\n          c: 1024,\n          klass: XOR\n        }\n      },\n      hmac_key_size: 768 / 8,\n      version: 1\n    },\n    \"2\": {\n      header: [0x1c94d7de, 2],\n      salt_size: 16,\n      xsalsa20_rev: true,\n      kdf: {\n        klass: Scrypt,\n        opts: {\n          c: 64,\n          klass: XOR,\n          N: 12,\n          r: 8,\n          p: 1\n        }\n      },\n      hmac_key_size: 768 / 8,\n      version: 2\n    },\n    \"3\": {\n      header: [0x1c94d7de, 3],\n      salt_size: 16,\n      xsalsa20_rev: false,\n      kdf: {\n        klass: Scrypt,\n        opts: {\n          c: 1,\n          klass: HMAC_SHA256,\n          N: 15,\n          r: 8,\n          p: 1\n        }\n      },\n      hmac_key_size: 768 / 8,\n      version: 3\n    }\n  };\n  exports.CURRENT_VERSION = CURRENT_VERSION = 3;\n\n  Base = function () {\n    function Base(_arg) {\n      var key, version;\n      key = _arg.key, version = _arg.version;\n      this.version = V[version != null ? version : CURRENT_VERSION];\n\n      if (this.version == null) {\n        throw new Error(\"unknown version: \" + version);\n      }\n\n      this.set_key(key);\n      this.derived_keys = {};\n    }\n\n    Base.prototype.kdf = function (_arg, cb) {\n      var args, dkLen, end, extra_keymaterial, i, k, key, keys, len, lens, order, progress_hook, raw, salt, salt_hex, v, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      salt = _arg.salt, extra_keymaterial = _arg.extra_keymaterial, progress_hook = _arg.progress_hook;\n      (function (_this) {\n        return function (__iced_k) {\n          __iced_deferrals = new iced.Deferrals(__iced_k, {\n            parent: ___iced_passed_deferral,\n            filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n            funcname: \"Base.kdf\"\n          });\n\n          _this._check_scrubbed(_this.key, \"in KDF\", cb, __iced_deferrals.defer({\n            lineno: 97\n          }));\n\n          __iced_deferrals._fulfill();\n        };\n      })(this)(function (_this) {\n        return function () {\n          salt_hex = salt.to_hex();\n          key = _this.key.clone();\n\n          (function (__iced_k) {\n            __iced_deferrals = new iced.Deferrals(__iced_k, {\n              parent: ___iced_passed_deferral,\n              filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n              funcname: \"Base.kdf\"\n            });\n\n            _this._check_scrubbed(key, \"KDF\", cb, __iced_deferrals.defer({\n              lineno: 105\n            }));\n\n            __iced_deferrals._fulfill();\n          })(function () {\n            (function (__iced_k) {\n              if ((keys = _this.derived_keys[salt_hex]) == null) {\n                _this._kdf = new _this.version.kdf.klass(_this.version.kdf.opts);\n                lens = {\n                  hmac: _this.version.hmac_key_size,\n                  aes: AES.keySize,\n                  twofish: TwoFish.keySize,\n                  salsa20: salsa20.Salsa20.keySize\n                };\n                order = ['hmac', 'aes', 'twofish', 'salsa20'];\n                dkLen = extra_keymaterial || 0;\n\n                for (k in lens) {\n                  v = lens[k];\n                  dkLen += v;\n                }\n\n                args = {\n                  dkLen: dkLen,\n                  key: key,\n                  progress_hook: progress_hook,\n                  salt: salt\n                };\n\n                (function (__iced_k) {\n                  __iced_deferrals = new iced.Deferrals(__iced_k, {\n                    parent: ___iced_passed_deferral,\n                    filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n                    funcname: \"Base.kdf\"\n                  });\n\n                  _this._kdf.run(args, __iced_deferrals.defer({\n                    assign_fn: function () {\n                      return function () {\n                        return raw = arguments[0];\n                      };\n                    }(),\n                    lineno: 124\n                  }));\n\n                  __iced_deferrals._fulfill();\n                })(function () {\n                  var _i, _len;\n\n                  keys = {};\n                  i = 0;\n\n                  for (_i = 0, _len = order.length; _i < _len; _i++) {\n                    k = order[_i];\n                    v = lens[k];\n                    len = v / 4;\n                    end = i + len;\n                    keys[k] = new WordArray(raw.words.slice(i, end));\n                    i = end;\n                  }\n\n                  keys.extra = new WordArray(raw.words.slice(end)).to_buffer();\n                  return __iced_k(_this.derived_keys[salt_hex] = keys);\n                });\n              } else {\n                return __iced_k();\n              }\n            })(function () {\n              return cb(null, keys);\n            });\n          });\n        };\n      }(this));\n    };\n\n    Base.prototype.set_key = function (key) {\n      var wakey;\n\n      if (key != null) {\n        wakey = WordArray.from_buffer(key);\n\n        if (!this.key || !this.key.equal(wakey)) {\n          this.scrub();\n          return this.key = wakey;\n        }\n      } else {\n        return this.scrub();\n      }\n    };\n\n    Base.prototype._check_scrubbed = function (key, where, ecb, okcb) {\n      if (key != null && !key.is_scrubbed()) {\n        return okcb();\n      } else {\n        return ecb(new Error(\"\" + where + \": Failed due to scrubbed key!\"), null);\n      }\n    };\n\n    Base.prototype.sign = function (_arg, cb) {\n      var input, key, out, progress_hook, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      input = _arg.input, key = _arg.key, salt = _arg.salt, progress_hook = _arg.progress_hook;\n      (function (_this) {\n        return function (__iced_k) {\n          __iced_deferrals = new iced.Deferrals(__iced_k, {\n            parent: ___iced_passed_deferral,\n            filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n            funcname: \"Base.sign\"\n          });\n\n          _this._check_scrubbed(key, \"HMAC\", cb, __iced_deferrals.defer({\n            lineno: 182\n          }));\n\n          __iced_deferrals._fulfill();\n        };\n      })(this)(function (_this) {\n        return function () {\n          input = new WordArray(_this.version.header).concat(salt).concat(input);\n\n          (function (__iced_k) {\n            __iced_deferrals = new iced.Deferrals(__iced_k, {\n              parent: ___iced_passed_deferral,\n              filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n              funcname: \"Base.sign\"\n            });\n            Concat.bulk_sign({\n              key: key,\n              input: input,\n              progress_hook: progress_hook\n            }, __iced_deferrals.defer({\n              assign_fn: function () {\n                return function () {\n                  return out = arguments[0];\n                };\n              }(),\n              lineno: 184\n            }));\n\n            __iced_deferrals._fulfill();\n          })(function () {\n            input.scrub();\n            return cb(null, out);\n          });\n        };\n      }(this));\n    };\n\n    Base.prototype.run_salsa20 = function (_arg, cb) {\n      var args, ct, input, iv, key, output_iv, progress_hook, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      input = _arg.input, key = _arg.key, iv = _arg.iv, output_iv = _arg.output_iv, progress_hook = _arg.progress_hook;\n      (function (_this) {\n        return function (__iced_k) {\n          __iced_deferrals = new iced.Deferrals(__iced_k, {\n            parent: ___iced_passed_deferral,\n            filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n            funcname: \"Base.run_salsa20\"\n          });\n\n          _this._check_scrubbed(key, \"Salsa20\", cb, __iced_deferrals.defer({\n            lineno: 200\n          }));\n\n          __iced_deferrals._fulfill();\n        };\n      })(this)(function (_this) {\n        return function () {\n          args = {\n            input: input,\n            progress_hook: progress_hook,\n            key: key,\n            iv: iv\n          };\n\n          if (_this.version.xsalsa20_rev) {\n            args.key = key.clone().endian_reverse();\n            args.iv = iv.clone().endian_reverse();\n          }\n\n          (function (__iced_k) {\n            __iced_deferrals = new iced.Deferrals(__iced_k, {\n              parent: ___iced_passed_deferral,\n              filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n              funcname: \"Base.run_salsa20\"\n            });\n            salsa20.bulk_encrypt(args, __iced_deferrals.defer({\n              assign_fn: function () {\n                return function () {\n                  return ct = arguments[0];\n                };\n              }(),\n              lineno: 212\n            }));\n\n            __iced_deferrals._fulfill();\n          })(function () {\n            if (output_iv) {\n              ct = iv.clone().concat(ct);\n            }\n\n            if (_this.version.xsalsa20_rev) {\n              args.key.scrub();\n              args.iv.scrub();\n            }\n\n            return cb(null, ct);\n          });\n        };\n      }(this));\n    };\n\n    Base.prototype.run_twofish = function (_arg, cb) {\n      var block_cipher, ct, input, iv, key, progress_hook, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      input = _arg.input, key = _arg.key, iv = _arg.iv, progress_hook = _arg.progress_hook;\n      (function (_this) {\n        return function (__iced_k) {\n          __iced_deferrals = new iced.Deferrals(__iced_k, {\n            parent: ___iced_passed_deferral,\n            filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n            funcname: \"Base.run_twofish\"\n          });\n\n          _this._check_scrubbed(key, \"TwoFish\", cb, __iced_deferrals.defer({\n            lineno: 235\n          }));\n\n          __iced_deferrals._fulfill();\n        };\n      })(this)(function (_this) {\n        return function () {\n          block_cipher = new TwoFish(key);\n\n          (function (__iced_k) {\n            __iced_deferrals = new iced.Deferrals(__iced_k, {\n              parent: ___iced_passed_deferral,\n              filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n              funcname: \"Base.run_twofish\"\n            });\n            ctr.bulk_encrypt({\n              block_cipher: block_cipher,\n              iv: iv,\n              input: input,\n              progress_hook: progress_hook,\n              what: \"twofish\"\n            }, __iced_deferrals.defer({\n              assign_fn: function () {\n                return function () {\n                  return ct = arguments[0];\n                };\n              }(),\n              lineno: 237\n            }));\n\n            __iced_deferrals._fulfill();\n          })(function () {\n            block_cipher.scrub();\n            return cb(null, iv.clone().concat(ct));\n          });\n        };\n      }(this));\n    };\n\n    Base.prototype.run_aes = function (_arg, cb) {\n      var block_cipher, ct, input, iv, key, progress_hook, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      input = _arg.input, key = _arg.key, iv = _arg.iv, progress_hook = _arg.progress_hook;\n      (function (_this) {\n        return function (__iced_k) {\n          __iced_deferrals = new iced.Deferrals(__iced_k, {\n            parent: ___iced_passed_deferral,\n            filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n            funcname: \"Base.run_aes\"\n          });\n\n          _this._check_scrubbed(key, \"AES\", cb, __iced_deferrals.defer({\n            lineno: 252\n          }));\n\n          __iced_deferrals._fulfill();\n        };\n      })(this)(function (_this) {\n        return function () {\n          block_cipher = new AES(key);\n\n          (function (__iced_k) {\n            __iced_deferrals = new iced.Deferrals(__iced_k, {\n              parent: ___iced_passed_deferral,\n              filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n              funcname: \"Base.run_aes\"\n            });\n            ctr.bulk_encrypt({\n              block_cipher: block_cipher,\n              iv: iv,\n              input: input,\n              progress_hook: progress_hook,\n              what: \"aes\"\n            }, __iced_deferrals.defer({\n              assign_fn: function () {\n                return function () {\n                  return ct = arguments[0];\n                };\n              }(),\n              lineno: 254\n            }));\n\n            __iced_deferrals._fulfill();\n          })(function () {\n            block_cipher.scrub();\n            return cb(null, iv.clone().concat(ct));\n          });\n        };\n      }(this));\n    };\n\n    Base.prototype.scrub = function () {\n      var algo, key, key_ring, salt, _ref1;\n\n      if (this.key != null) {\n        this.key.scrub();\n      }\n\n      if (this.derived_keys != null) {\n        _ref1 = this.derived_keys;\n\n        for (salt in _ref1) {\n          key_ring = _ref1[salt];\n\n          for (algo in key_ring) {\n            key = key_ring[algo];\n\n            if (algo !== 'extra') {\n              key.scrub();\n            }\n          }\n        }\n      }\n\n      this.derived_keys = {};\n\n      if (this.salt != null) {\n        this.salt.scrub();\n      }\n\n      this.salt = null;\n      return this.key = null;\n    };\n\n    Base.prototype.clone_derived_keys = function () {\n      var algo, key, key_ring, ret, salt, _ref1;\n\n      ret = null;\n\n      if (this.derived_keys != null) {\n        ret = {};\n        _ref1 = this.derived_keys;\n\n        for (salt in _ref1) {\n          key_ring = _ref1[salt];\n          ret[salt] = {};\n\n          for (algo in key_ring) {\n            key = key_ring[algo];\n            ret[salt][algo] = algo === 'extra' ? key : key.clone();\n          }\n        }\n      }\n\n      return ret;\n    };\n\n    return Base;\n  }();\n\n  Encryptor = function (_super) {\n    __extends(Encryptor, _super);\n\n    function Encryptor(_arg) {\n      var key, rng, version;\n      key = _arg.key, rng = _arg.rng, version = _arg.version;\n\n      Encryptor.__super__.constructor.call(this, {\n        key: key,\n        version: version\n      });\n\n      this.rng = rng || prng.generate;\n    }\n\n    Encryptor.prototype.pick_random_ivs = function (_arg, cb) {\n      var iv_lens, ivs, k, progress_hook, v, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      progress_hook = _arg.progress_hook;\n      iv_lens = {\n        aes: AES.ivSize,\n        twofish: TwoFish.ivSize,\n        salsa20: salsa20.Salsa20.ivSize\n      };\n      ivs = {};\n      (function (_this) {\n        return function (__iced_k) {\n          var _i, _k, _keys, _ref1, _results, _while;\n\n          _ref1 = iv_lens;\n\n          _keys = function () {\n            var _results1;\n\n            _results1 = [];\n\n            for (_k in _ref1) {\n              _results1.push(_k);\n            }\n\n            return _results1;\n          }();\n\n          _i = 0;\n\n          _while = function (__iced_k) {\n            var _break, _continue, _next;\n\n            _break = __iced_k;\n\n            _continue = function () {\n              return iced.trampoline(function () {\n                ++_i;\n                return _while(__iced_k);\n              });\n            };\n\n            _next = _continue;\n\n            if (!(_i < _keys.length)) {\n              return _break();\n            } else {\n              k = _keys[_i];\n              v = _ref1[k];\n\n              (function (__iced_k) {\n                __iced_deferrals = new iced.Deferrals(__iced_k, {\n                  parent: ___iced_passed_deferral,\n                  filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n                  funcname: \"Encryptor.pick_random_ivs\"\n                });\n\n                _this.rng(v, __iced_deferrals.defer({\n                  assign_fn: function (__slot_1, __slot_2) {\n                    return function () {\n                      return __slot_1[__slot_2] = arguments[0];\n                    };\n                  }(ivs, k),\n                  lineno: 377\n                }));\n\n                __iced_deferrals._fulfill();\n              })(_next);\n            }\n          };\n\n          _while(__iced_k);\n        };\n      })(this)(function (_this) {\n        return function () {\n          return cb(ivs);\n        };\n      }(this));\n    };\n\n    Encryptor.prototype.resalt = function (_arg, cb) {\n      var err, extra_keymaterial, progress_hook, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      salt = _arg.salt, extra_keymaterial = _arg.extra_keymaterial, progress_hook = _arg.progress_hook;\n      err = null;\n      (function (_this) {\n        return function (__iced_k) {\n          if (salt == null) {\n            (function (__iced_k) {\n              __iced_deferrals = new iced.Deferrals(__iced_k, {\n                parent: ___iced_passed_deferral,\n                filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n                funcname: \"Encryptor.resalt\"\n              });\n\n              _this.rng(_this.version.salt_size, __iced_deferrals.defer({\n                assign_fn: function (__slot_1) {\n                  return function () {\n                    return __slot_1.salt = arguments[0];\n                  };\n                }(_this),\n                lineno: 393\n              }));\n\n              __iced_deferrals._fulfill();\n            })(__iced_k);\n          } else {\n            return __iced_k(salt.length !== _this.version.salt_size ? err = new Error(\"Need a salt of exactly \" + _this.version.salt_size + \" bytes (got \" + salt.length + \")\") : _this.salt = WordArray.alloc(salt));\n          }\n        };\n      })(this)(function (_this) {\n        return function () {\n          (function (__iced_k) {\n            if (err == null) {\n              (function (__iced_k) {\n                __iced_deferrals = new iced.Deferrals(__iced_k, {\n                  parent: ___iced_passed_deferral,\n                  filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n                  funcname: \"Encryptor.resalt\"\n                });\n\n                _this.kdf({\n                  extra_keymaterial: extra_keymaterial,\n                  progress_hook: progress_hook,\n                  salt: _this.salt\n                }, __iced_deferrals.defer({\n                  assign_fn: function (__slot_1) {\n                    return function () {\n                      err = arguments[0];\n                      return __slot_1.keys = arguments[1];\n                    };\n                  }(_this),\n                  lineno: 399\n                }));\n\n                __iced_deferrals._fulfill();\n              })(__iced_k);\n            } else {\n              return __iced_k();\n            }\n          })(function () {\n            return cb(err, _this.keys);\n          });\n        };\n      }(this));\n    };\n\n    Encryptor.prototype.run = function (_arg, cb) {\n      var ct1, ct2, ct3, data, esc, extra_keymaterial, ivs, progress_hook, pt, ret, salt, sig, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      data = _arg.data, salt = _arg.salt, extra_keymaterial = _arg.extra_keymaterial, progress_hook = _arg.progress_hook;\n      esc = make_esc(cb, \"Encryptor::run\");\n      (function (_this) {\n        return function (__iced_k) {\n          if (salt != null || _this.salt == null) {\n            (function (__iced_k) {\n              __iced_deferrals = new iced.Deferrals(__iced_k, {\n                parent: ___iced_passed_deferral,\n                filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n                funcname: \"Encryptor.run\"\n              });\n\n              _this.resalt({\n                salt: salt,\n                extra_keymaterial: extra_keymaterial,\n                progress_hook: progress_hook\n              }, esc(__iced_deferrals.defer({\n                lineno: 430\n              })));\n\n              __iced_deferrals._fulfill();\n            })(__iced_k);\n          } else {\n            return __iced_k();\n          }\n        };\n      })(this)(function (_this) {\n        return function () {\n          (function (__iced_k) {\n            __iced_deferrals = new iced.Deferrals(__iced_k, {\n              parent: ___iced_passed_deferral,\n              filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n              funcname: \"Encryptor.run\"\n            });\n\n            _this.pick_random_ivs({\n              progress_hook: progress_hook\n            }, __iced_deferrals.defer({\n              assign_fn: function () {\n                return function () {\n                  return ivs = arguments[0];\n                };\n              }(),\n              lineno: 431\n            }));\n\n            __iced_deferrals._fulfill();\n          })(function () {\n            pt = WordArray.from_buffer(data);\n\n            (function (__iced_k) {\n              __iced_deferrals = new iced.Deferrals(__iced_k, {\n                parent: ___iced_passed_deferral,\n                filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n                funcname: \"Encryptor.run\"\n              });\n\n              _this.run_salsa20({\n                input: pt,\n                key: _this.keys.salsa20,\n                progress_hook: progress_hook,\n                iv: ivs.salsa20,\n                output_iv: true\n              }, esc(__iced_deferrals.defer({\n                assign_fn: function () {\n                  return function () {\n                    return ct1 = arguments[0];\n                  };\n                }(),\n                lineno: 433\n              })));\n\n              __iced_deferrals._fulfill();\n            })(function () {\n              (function (__iced_k) {\n                __iced_deferrals = new iced.Deferrals(__iced_k, {\n                  parent: ___iced_passed_deferral,\n                  filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n                  funcname: \"Encryptor.run\"\n                });\n\n                _this.run_twofish({\n                  input: ct1,\n                  key: _this.keys.twofish,\n                  progress_hook: progress_hook,\n                  iv: ivs.twofish\n                }, esc(__iced_deferrals.defer({\n                  assign_fn: function () {\n                    return function () {\n                      return ct2 = arguments[0];\n                    };\n                  }(),\n                  lineno: 434\n                })));\n\n                __iced_deferrals._fulfill();\n              })(function () {\n                (function (__iced_k) {\n                  __iced_deferrals = new iced.Deferrals(__iced_k, {\n                    parent: ___iced_passed_deferral,\n                    filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n                    funcname: \"Encryptor.run\"\n                  });\n\n                  _this.run_aes({\n                    input: ct2,\n                    key: _this.keys.aes,\n                    progress_hook: progress_hook,\n                    iv: ivs.aes\n                  }, esc(__iced_deferrals.defer({\n                    assign_fn: function () {\n                      return function () {\n                        return ct3 = arguments[0];\n                      };\n                    }(),\n                    lineno: 435\n                  })));\n\n                  __iced_deferrals._fulfill();\n                })(function () {\n                  (function (__iced_k) {\n                    __iced_deferrals = new iced.Deferrals(__iced_k, {\n                      parent: ___iced_passed_deferral,\n                      filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\",\n                      funcname: \"Encryptor.run\"\n                    });\n\n                    _this.sign({\n                      input: ct3,\n                      key: _this.keys.hmac,\n                      progress_hook: progress_hook,\n                      salt: _this.salt\n                    }, esc(__iced_deferrals.defer({\n                      assign_fn: function () {\n                        return function () {\n                          return sig = arguments[0];\n                        };\n                      }(),\n                      lineno: 436\n                    })));\n\n                    __iced_deferrals._fulfill();\n                  })(function () {\n                    ret = new WordArray(_this.version.header).concat(_this.salt).concat(sig).concat(ct3).to_buffer();\n                    util.scrub_buffer(data);\n                    return cb(null, ret);\n                  });\n                });\n              });\n            });\n          });\n        };\n      }(this));\n    };\n\n    Encryptor.prototype.clone = function () {\n      var ret, _ref1, _ref2;\n\n      ret = new Encryptor({\n        key: (_ref1 = this.key) != null ? _ref1.to_buffer() : void 0,\n        rng: this.rng,\n        version: (_ref2 = this.version) != null ? _ref2.version : void 0\n      });\n      ret.derived_keys = this.clone_derived_keys();\n      return ret;\n    };\n\n    return Encryptor;\n  }(Base);\n\n  encrypt = function (_arg, cb) {\n    var data, enc, err, key, progress_hook, ret, rng, version, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n    __iced_k = __iced_k_noop;\n    ___iced_passed_deferral = iced.findDeferral(arguments);\n    key = _arg.key, data = _arg.data, rng = _arg.rng, progress_hook = _arg.progress_hook, version = _arg.version;\n    enc = new Encryptor({\n      key: key,\n      rng: rng,\n      version: version\n    });\n    (function (_this) {\n      return function (__iced_k) {\n        __iced_deferrals = new iced.Deferrals(__iced_k, {\n          parent: ___iced_passed_deferral,\n          filename: \"/Users/max/src/keybase/triplesec/src/enc.iced\"\n        });\n        enc.run({\n          data: data,\n          progress_hook: progress_hook\n        }, __iced_deferrals.defer({\n          assign_fn: function () {\n            return function () {\n              err = arguments[0];\n              return ret = arguments[1];\n            };\n          }(),\n          lineno: 475\n        }));\n\n        __iced_deferrals._fulfill();\n      };\n    })(this)(function (_this) {\n      return function () {\n        enc.scrub();\n        return cb(err, ret);\n      };\n    }(this));\n  };\n\n  exports.V = V;\n  exports.encrypt = encrypt;\n  exports.Base = Base;\n  exports.Encryptor = Encryptor;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}