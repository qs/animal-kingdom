{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst services_1 = require(\"./services\");\n/**\n * Validates the social proofs in a user's profile. Currently supports validation of\n * Facebook, Twitter, GitHub, Instagram, LinkedIn and HackerNews accounts.\n *\n * @param {Object} profile The JSON of the profile to be validated\n * @param {string} ownerAddress The owner bitcoin address to be validated\n * @param {string} [name=null] The Blockstack name to be validated\n * @returns {Promise} that resolves to an array of validated proof objects\n */\n\n\nfunction validateProofs(profile, ownerAddress, name = null) {\n  if (!profile) {\n    throw new Error('Profile must not be null');\n  }\n\n  let accounts = [];\n  const proofsToValidate = [];\n\n  if (profile.hasOwnProperty('account')) {\n    accounts = profile.account;\n  } else {\n    return Promise.resolve([]);\n  }\n\n  accounts.forEach(account => {\n    // skip if proof service is not supported\n    if (account.hasOwnProperty('service') && !services_1.profileServices.hasOwnProperty(account.service)) {\n      return;\n    }\n\n    if (!(account.hasOwnProperty('proofType') && account.proofType === 'http' && account.hasOwnProperty('proofUrl'))) {\n      return;\n    }\n\n    const proof = {\n      service: account.service,\n      proof_url: account.proofUrl,\n      identifier: account.identifier,\n      valid: false\n    };\n    proofsToValidate.push(services_1.profileServices[account.service].validateProof(proof, ownerAddress, name));\n  });\n  return Promise.all(proofsToValidate);\n}\n\nexports.validateProofs = validateProofs;","map":null,"metadata":{},"sourceType":"script"}