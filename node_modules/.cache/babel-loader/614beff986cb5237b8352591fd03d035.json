{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst typeFields_1 = require('../../typeFields');\n\nconst tools_1 = require('../tools');\n\nconst varuint = require('../varint');\n\nfunction decode(keyVal) {\n  if (keyVal.key[0] !== typeFields_1.InputTypes.WITNESS_UTXO) {\n    throw new Error('Decode Error: could not decode witnessUtxo with key 0x' + keyVal.key.toString('hex'));\n  }\n\n  const value = tools_1.readUInt64LE(keyVal.value, 0);\n  let _offset = 8;\n  const scriptLen = varuint.decode(keyVal.value, _offset);\n  _offset += varuint.encodingLength(scriptLen);\n  const script = keyVal.value.slice(_offset);\n\n  if (script.length !== scriptLen) {\n    throw new Error('Decode Error: WITNESS_UTXO script is not proper length');\n  }\n\n  return {\n    script,\n    value\n  };\n}\n\nexports.decode = decode;\n\nfunction encode(data) {\n  const script = data.script,\n        value = data.value;\n  const varintLen = varuint.encodingLength(script.length);\n  const result = Buffer.allocUnsafe(8 + varintLen + script.length);\n  tools_1.writeUInt64LE(result, value, 0);\n  varuint.encode(script.length, result, 8);\n  script.copy(result, 8 + varintLen);\n  return {\n    key: Buffer.from([typeFields_1.InputTypes.WITNESS_UTXO]),\n    value: result\n  };\n}\n\nexports.encode = encode;\nexports.expected = '{ script: Buffer; value: number; }';\n\nfunction check(data) {\n  return Buffer.isBuffer(data.script) && typeof data.value === 'number';\n}\n\nexports.check = check;\n\nfunction canAdd(currentData, newData) {\n  return !!currentData && !!newData && currentData.witnessUtxo === undefined && currentData.nonWitnessUtxo === undefined;\n}\n\nexports.canAdd = canAdd;","map":null,"metadata":{},"sourceType":"script"}