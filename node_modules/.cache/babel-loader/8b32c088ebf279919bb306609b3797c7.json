{"ast":null,"code":"// Generated by IcedCoffeeScript 108.0.8\n(function () {\n  var AES,\n      BlockCipher,\n      G,\n      Global,\n      scrub_vec,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function (child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  BlockCipher = require('./algbase').BlockCipher;\n  scrub_vec = require('./util').scrub_vec;\n\n  Global = function () {\n    function Global() {\n      var i;\n      this.SBOX = [];\n      this.INV_SBOX = [];\n\n      this.SUB_MIX = function () {\n        var _i, _results;\n\n        _results = [];\n\n        for (i = _i = 0; _i < 4; i = ++_i) {\n          _results.push([]);\n        }\n\n        return _results;\n      }();\n\n      this.INV_SUB_MIX = function () {\n        var _i, _results;\n\n        _results = [];\n\n        for (i = _i = 0; _i < 4; i = ++_i) {\n          _results.push([]);\n        }\n\n        return _results;\n      }();\n\n      this.init();\n      this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n    }\n\n    Global.prototype.init = function () {\n      var d, i, sx, t, x, x2, x4, x8, xi, _i;\n\n      d = function () {\n        var _i, _results;\n\n        _results = [];\n\n        for (i = _i = 0; _i < 256; i = ++_i) {\n          if (i < 128) {\n            _results.push(i << 1);\n          } else {\n            _results.push(i << 1 ^ 0x11b);\n          }\n        }\n\n        return _results;\n      }();\n\n      x = 0;\n      xi = 0;\n\n      for (i = _i = 0; _i < 256; i = ++_i) {\n        sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;\n        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;\n        this.SBOX[x] = sx;\n        this.INV_SBOX[sx] = x;\n        x2 = d[x];\n        x4 = d[x2];\n        x8 = d[x4];\n        t = d[sx] * 0x101 ^ sx * 0x1010100;\n        this.SUB_MIX[0][x] = t << 24 | t >>> 8;\n        this.SUB_MIX[1][x] = t << 16 | t >>> 16;\n        this.SUB_MIX[2][x] = t << 8 | t >>> 24;\n        this.SUB_MIX[3][x] = t;\n        t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n        this.INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;\n        this.INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;\n        this.INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;\n        this.INV_SUB_MIX[3][sx] = t;\n\n        if (x === 0) {\n          x = xi = 1;\n        } else {\n          x = x2 ^ d[d[d[x8 ^ x2]]];\n          xi ^= d[d[xi]];\n        }\n      }\n\n      return true;\n    };\n\n    return Global;\n  }();\n\n  G = new Global();\n\n  AES = function (_super) {\n    __extends(AES, _super);\n\n    AES.blockSize = 4 * 4;\n    AES.prototype.blockSize = AES.blockSize;\n    AES.keySize = 256 / 8;\n    AES.prototype.keySize = AES.keySize;\n    AES.ivSize = AES.blockSize;\n    AES.prototype.ivSize = AES.ivSize;\n\n    function AES(key) {\n      this._key = key.clone();\n\n      this._doReset();\n    }\n\n    AES.prototype._doReset = function () {\n      var invKsRow, keySize, keyWords, ksRow, ksRows, t, _i, _j;\n\n      keyWords = this._key.words;\n      keySize = this._key.sigBytes / 4;\n      this._nRounds = keySize + 6;\n      ksRows = (this._nRounds + 1) * 4;\n      this._keySchedule = [];\n\n      for (ksRow = _i = 0; 0 <= ksRows ? _i < ksRows : _i > ksRows; ksRow = 0 <= ksRows ? ++_i : --_i) {\n        this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], ksRow % keySize === 0 ? (t = t << 8 | t >>> 24, t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff], t ^= G.RCON[ksRow / keySize | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);\n      }\n\n      this._invKeySchedule = [];\n\n      for (invKsRow = _j = 0; 0 <= ksRows ? _j < ksRows : _j > ksRows; invKsRow = 0 <= ksRows ? ++_j : --_j) {\n        ksRow = ksRows - invKsRow;\n        t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];\n        this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[t >>> 16 & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[t >>> 8 & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];\n      }\n\n      return true;\n    };\n\n    AES.prototype.encryptBlock = function (M, offset) {\n      if (offset == null) {\n        offset = 0;\n      }\n\n      return this._doCryptBlock(M, offset, this._keySchedule, G.SUB_MIX, G.SBOX);\n    };\n\n    AES.prototype.decryptBlock = function (M, offset) {\n      var _ref, _ref1;\n\n      if (offset == null) {\n        offset = 0;\n      }\n\n      _ref = [M[offset + 3], M[offset + 1]], M[offset + 1] = _ref[0], M[offset + 3] = _ref[1];\n\n      this._doCryptBlock(M, offset, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);\n\n      return _ref1 = [M[offset + 3], M[offset + 1]], M[offset + 1] = _ref1[0], M[offset + 3] = _ref1[1], _ref1;\n    };\n\n    AES.prototype.scrub = function () {\n      scrub_vec(this._keySchedule);\n      scrub_vec(this._invKeySchedule);\n      return this._key.scrub();\n    };\n\n    AES.prototype._doCryptBlock = function (M, offset, keySchedule, SUB_MIX, SBOX) {\n      var ksRow, round, s0, s1, s2, s3, t0, t1, t2, t3, _i, _ref;\n\n      s0 = M[offset] ^ keySchedule[0];\n      s1 = M[offset + 1] ^ keySchedule[1];\n      s2 = M[offset + 2] ^ keySchedule[2];\n      s3 = M[offset + 3] ^ keySchedule[3];\n      ksRow = 4;\n\n      for (round = _i = 1, _ref = this._nRounds; 1 <= _ref ? _i < _ref : _i > _ref; round = 1 <= _ref ? ++_i : --_i) {\n        t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][s1 >>> 16 & 0xff] ^ SUB_MIX[2][s2 >>> 8 & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];\n        t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][s2 >>> 16 & 0xff] ^ SUB_MIX[2][s3 >>> 8 & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];\n        t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][s3 >>> 16 & 0xff] ^ SUB_MIX[2][s0 >>> 8 & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];\n        t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][s0 >>> 16 & 0xff] ^ SUB_MIX[2][s1 >>> 8 & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];\n        s0 = t0;\n        s1 = t1;\n        s2 = t2;\n        s3 = t3;\n      }\n\n      t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n      t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n      t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n      t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n      M[offset] = t0;\n      M[offset + 1] = t1;\n      M[offset + 2] = t2;\n      return M[offset + 3] = t3;\n    };\n\n    return AES;\n  }(BlockCipher);\n\n  exports.AES = AES;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}