{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst profileZoneFiles_1 = require(\"./profileZoneFiles\");\n\nconst config_1 = require(\"../config\");\n\nconst fetchUtil_1 = require(\"../fetchUtil\");\n/**\n * Look up a user profile by blockstack ID\n *\n * @param {string} username - The Blockstack ID of the profile to look up\n * @param {string} [zoneFileLookupURL=null] - The URL\n * to use for zonefile lookup. If falsey, lookupProfile will use the\n * blockstack.js [[getNameInfo]] function.\n * @returns {Promise} that resolves to a profile object\n */\n\n\nfunction lookupProfile(username, zoneFileLookupURL) {\n  if (!username) {\n    return Promise.reject();\n  }\n\n  let lookupPromise;\n\n  if (zoneFileLookupURL) {\n    const url = \"\".concat(zoneFileLookupURL.replace(/\\/$/, ''), \"/\").concat(username);\n    lookupPromise = fetchUtil_1.fetchPrivate(url).then(response => response.json());\n  } else {\n    lookupPromise = config_1.config.network.getNameInfo(username);\n  }\n\n  return lookupPromise.then(responseJSON => {\n    if (responseJSON.hasOwnProperty('zonefile') && responseJSON.hasOwnProperty('address')) {\n      return profileZoneFiles_1.resolveZoneFileToProfile(responseJSON.zonefile, responseJSON.address);\n    } else {\n      throw new Error('Invalid zonefile lookup response: did not contain `address`' + ' or `zonefile` field');\n    }\n  });\n}\n\nexports.lookupProfile = lookupProfile;","map":null,"metadata":{},"sourceType":"script"}