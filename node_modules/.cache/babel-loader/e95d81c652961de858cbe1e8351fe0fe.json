{"ast":null,"code":"// Generated by IcedCoffeeScript 108.0.8\n(function () {\n  var Cipher,\n      Counter,\n      Salsa20,\n      Salsa20Core,\n      Salsa20InnerCore,\n      Salsa20WordStream,\n      StreamCipher,\n      WordArray,\n      asum,\n      bulk_encrypt,\n      encrypt,\n      endian_reverse,\n      fixup_uint32,\n      iced,\n      util,\n      __iced_k,\n      __iced_k_noop,\n      _ref,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function (child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  iced = require('iced-runtime');\n\n  __iced_k = __iced_k_noop = function () {};\n\n  _ref = require('./wordarray'), endian_reverse = _ref.endian_reverse, WordArray = _ref.WordArray;\n  Counter = require('./ctr').Counter;\n  fixup_uint32 = require('./util').fixup_uint32;\n  StreamCipher = require('./algbase').StreamCipher;\n  util = require('./util');\n\n  asum = function (out, v) {\n    var e, i, _i, _len;\n\n    for (i = _i = 0, _len = v.length; _i < _len; i = ++_i) {\n      e = v[i];\n      out[i] += e;\n    }\n\n    return false;\n  };\n\n  Salsa20InnerCore = function () {\n    function Salsa20InnerCore(rounds) {\n      this.rounds = rounds;\n    }\n\n    Salsa20InnerCore.prototype._core = function (v) {\n      var i, u, x0, x1, x10, x11, x12, x13, x14, x15, x2, x3, x4, x5, x6, x7, x8, x9, _i, _ref1;\n\n      x0 = v[0], x1 = v[1], x2 = v[2], x3 = v[3], x4 = v[4], x5 = v[5], x6 = v[6], x7 = v[7], x8 = v[8], x9 = v[9], x10 = v[10], x11 = v[11], x12 = v[12], x13 = v[13], x14 = v[14], x15 = v[15];\n\n      for (i = _i = 0, _ref1 = this.rounds; _i < _ref1; i = _i += 2) {\n        u = x0 + x12 | 0;\n        x4 ^= u << 7 | u >>> 25;\n        u = x4 + x0 | 0;\n        x8 ^= u << 9 | u >>> 23;\n        u = x8 + x4 | 0;\n        x12 ^= u << 13 | u >>> 19;\n        u = x12 + x8 | 0;\n        x0 ^= u << 18 | u >>> 14;\n        u = x5 + x1 | 0;\n        x9 ^= u << 7 | u >>> 25;\n        u = x9 + x5 | 0;\n        x13 ^= u << 9 | u >>> 23;\n        u = x13 + x9 | 0;\n        x1 ^= u << 13 | u >>> 19;\n        u = x1 + x13 | 0;\n        x5 ^= u << 18 | u >>> 14;\n        u = x10 + x6 | 0;\n        x14 ^= u << 7 | u >>> 25;\n        u = x14 + x10 | 0;\n        x2 ^= u << 9 | u >>> 23;\n        u = x2 + x14 | 0;\n        x6 ^= u << 13 | u >>> 19;\n        u = x6 + x2 | 0;\n        x10 ^= u << 18 | u >>> 14;\n        u = x15 + x11 | 0;\n        x3 ^= u << 7 | u >>> 25;\n        u = x3 + x15 | 0;\n        x7 ^= u << 9 | u >>> 23;\n        u = x7 + x3 | 0;\n        x11 ^= u << 13 | u >>> 19;\n        u = x11 + x7 | 0;\n        x15 ^= u << 18 | u >>> 14;\n        u = x0 + x3 | 0;\n        x1 ^= u << 7 | u >>> 25;\n        u = x1 + x0 | 0;\n        x2 ^= u << 9 | u >>> 23;\n        u = x2 + x1 | 0;\n        x3 ^= u << 13 | u >>> 19;\n        u = x3 + x2 | 0;\n        x0 ^= u << 18 | u >>> 14;\n        u = x5 + x4 | 0;\n        x6 ^= u << 7 | u >>> 25;\n        u = x6 + x5 | 0;\n        x7 ^= u << 9 | u >>> 23;\n        u = x7 + x6 | 0;\n        x4 ^= u << 13 | u >>> 19;\n        u = x4 + x7 | 0;\n        x5 ^= u << 18 | u >>> 14;\n        u = x10 + x9 | 0;\n        x11 ^= u << 7 | u >>> 25;\n        u = x11 + x10 | 0;\n        x8 ^= u << 9 | u >>> 23;\n        u = x8 + x11 | 0;\n        x9 ^= u << 13 | u >>> 19;\n        u = x9 + x8 | 0;\n        x10 ^= u << 18 | u >>> 14;\n        u = x15 + x14 | 0;\n        x12 ^= u << 7 | u >>> 25;\n        u = x12 + x15 | 0;\n        x13 ^= u << 9 | u >>> 23;\n        u = x13 + x12 | 0;\n        x14 ^= u << 13 | u >>> 19;\n        u = x14 + x13 | 0;\n        x15 ^= u << 18 | u >>> 14;\n      }\n\n      return [x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15];\n    };\n\n    return Salsa20InnerCore;\n  }();\n\n  Salsa20Core = function (_super) {\n    __extends(Salsa20Core, _super);\n\n    Salsa20Core.prototype.sigma = WordArray.from_buffer_le(new Buffer(\"expand 32-byte k\"));\n    Salsa20Core.prototype.tau = WordArray.from_buffer_le(new Buffer(\"expand 16-byte k\"));\n    Salsa20Core.blockSize = 64;\n    Salsa20Core.prototype.blockSize = Salsa20Core.blockSize;\n    Salsa20Core.keySize = 32;\n    Salsa20Core.prototype.keySize = Salsa20Core.keySize;\n    Salsa20Core.ivSize = 192 / 8;\n    Salsa20Core.prototype.ivSize = Salsa20Core.ivSize;\n\n    function Salsa20Core(key, nonce) {\n      var _ref1;\n\n      Salsa20Core.__super__.constructor.call(this, 20);\n\n      this.key = key.clone().endian_reverse();\n      this.nonce = nonce.clone().endian_reverse();\n\n      if (!(this.key.sigBytes === 16 && this.nonce.sigBytes === 8 || this.key.sigBytes === 32 && ((_ref1 = this.nonce.sigBytes) === 8 || _ref1 === 24))) {\n        throw new Error(\"Bad key/nonce lengths\");\n      }\n\n      if (this.nonce.sigBytes === 24) {\n        this.xsalsa_setup();\n      }\n\n      this.input = this.key_iv_setup(this.nonce, this.key);\n\n      this._reset();\n    }\n\n    Salsa20Core.prototype.scrub = function () {\n      this.key.scrub();\n      this.nonce.scrub();\n      return util.scrub_vec(this.input);\n    };\n\n    Salsa20Core.prototype.xsalsa_setup = function () {\n      var n0, n1;\n      n0 = new WordArray(this.nonce.words.slice(0, 4));\n      this.nonce = n1 = new WordArray(this.nonce.words.slice(4));\n      return this.key = this.hsalsa20(n0, this.key);\n    };\n\n    Salsa20Core.prototype.hsalsa20 = function (nonce, key) {\n      var i, indexes, input, v;\n      input = this.key_iv_setup(nonce, key);\n      input[8] = nonce.words[2];\n      input[9] = nonce.words[3];\n      v = this._core(input);\n      indexes = [0, 5, 10, 15, 6, 7, 8, 9];\n\n      v = function () {\n        var _i, _len, _results;\n\n        _results = [];\n\n        for (_i = 0, _len = indexes.length; _i < _len; _i++) {\n          i = indexes[_i];\n\n          _results.push(fixup_uint32(v[i]));\n        }\n\n        return _results;\n      }();\n\n      util.scrub_vec(input);\n      return new WordArray(v);\n    };\n\n    Salsa20Core.prototype.key_iv_setup = function (nonce, key) {\n      var A, C, i, out, _i, _j, _k, _ref1;\n\n      out = [];\n\n      for (i = _i = 0; _i < 4; i = ++_i) {\n        out[i + 1] = key.words[i];\n      }\n\n      _ref1 = key.sigBytes === 32 ? [this.sigma, key.words.slice(4)] : [this.tau, key.words], C = _ref1[0], A = _ref1[1];\n\n      for (i = _j = 0; _j < 4; i = ++_j) {\n        out[i + 11] = A[i];\n      }\n\n      for (i = _k = 0; _k < 4; i = ++_k) {\n        out[i * 5] = C.words[i];\n      }\n\n      out[6] = nonce.words[0];\n      out[7] = nonce.words[1];\n      return out;\n    };\n\n    Salsa20Core.prototype.counter_setup = function () {\n      this.input[8] = this.counter.get().words[0];\n      return this.input[9] = this.counter.get().words[1];\n    };\n\n    Salsa20Core.prototype._reset = function () {\n      return this.counter = new Counter({\n        len: 2\n      });\n    };\n\n    Salsa20Core.prototype._generateBlock = function () {\n      var v;\n      this.counter_setup();\n      v = this._core(this.input);\n      asum(v, this.input);\n      this.counter.inc_le();\n      return v;\n    };\n\n    return Salsa20Core;\n  }(Salsa20InnerCore);\n\n  exports.Salsa20WordStream = Salsa20WordStream = function (_super) {\n    __extends(Salsa20WordStream, _super);\n\n    function Salsa20WordStream() {\n      return Salsa20WordStream.__super__.constructor.apply(this, arguments);\n    }\n\n    Salsa20WordStream.prototype._reset = function () {\n      return Salsa20WordStream.__super__._reset.call(this);\n    };\n\n    Salsa20WordStream.prototype.getWordArray = function (nbytes) {\n      var blocks, i, nblocks, w, words, _i, _len, _ref1;\n\n      if (nbytes == null || nbytes === this.blockSize) {\n        words = this._generateBlock();\n      } else {\n        nblocks = Math.ceil(nbytes / this.blockSize);\n\n        blocks = function () {\n          var _i, _results;\n\n          _results = [];\n\n          for (i = _i = 0; 0 <= nblocks ? _i < nblocks : _i > nblocks; i = 0 <= nblocks ? ++_i : --_i) {\n            _results.push(this._generateBlock());\n          }\n\n          return _results;\n        }.call(this);\n\n        words = (_ref1 = []).concat.apply(_ref1, blocks);\n      }\n\n      for (i = _i = 0, _len = words.length; _i < _len; i = ++_i) {\n        w = words[i];\n        words[i] = endian_reverse(w);\n      }\n\n      return new WordArray(words, nbytes);\n    };\n\n    return Salsa20WordStream;\n  }(Salsa20Core);\n\n  exports.Salsa20 = Salsa20 = function (_super) {\n    __extends(Salsa20, _super);\n\n    function Salsa20() {\n      return Salsa20.__super__.constructor.apply(this, arguments);\n    }\n\n    Salsa20.prototype._reset = function () {\n      Salsa20.__super__._reset.call(this);\n\n      return this._i = this.blockSize;\n    };\n\n    Salsa20.prototype.getBytes = function (needed) {\n      var bsz, n, v;\n\n      if (needed == null) {\n        needed = this.blockSize;\n      }\n\n      v = [];\n      bsz = this.blockSize;\n\n      if (this._i === bsz && needed === bsz) {\n        return this._generateBlockBuffer();\n      } else {\n        while (needed > 0) {\n          if (this._i === bsz) {\n            this._generateBlockBuffer();\n\n            this._i = 0;\n          }\n\n          n = Math.min(needed, bsz - this._i);\n          v.push(n === bsz ? this._buf : this._buf.slice(this._i, this._i + n));\n          this._i += n;\n          needed -= n;\n        }\n\n        return Buffer.concat(v);\n      }\n    };\n\n    Salsa20.prototype._generateBlockBuffer = function () {\n      var e, i, v, _i, _len;\n\n      this._buf = new Buffer(this.blockSize);\n      v = this._generateBlock();\n\n      for (i = _i = 0, _len = v.length; _i < _len; i = ++_i) {\n        e = v[i];\n\n        this._buf.writeUInt32LE(fixup_uint32(e), i * 4);\n      }\n\n      return this._buf;\n    };\n\n    return Salsa20;\n  }(Salsa20Core);\n\n  exports.Cipher = Cipher = function (_super) {\n    __extends(Cipher, _super);\n\n    function Cipher(_arg) {\n      var iv, key;\n      key = _arg.key, iv = _arg.iv;\n\n      Cipher.__super__.constructor.call(this);\n\n      this.salsa = new Salsa20WordStream(key, iv);\n      this.bsiw = this.salsa.blockSize / 4;\n    }\n\n    Cipher.prototype.scrub = function () {\n      return this.salsa.scrub();\n    };\n\n    Cipher.prototype.get_pad = function () {\n      var pad;\n      pad = this.salsa.getWordArray();\n      return pad;\n    };\n\n    return Cipher;\n  }(StreamCipher);\n\n  exports.encrypt = encrypt = function (_arg) {\n    var cipher, input, iv, key, ret;\n    key = _arg.key, iv = _arg.iv, input = _arg.input;\n    cipher = new Cipher({\n      key: key,\n      iv: iv\n    });\n    ret = cipher.encrypt(input);\n    cipher.scrub();\n    return ret;\n  };\n\n  exports.bulk_encrypt = bulk_encrypt = function (_arg, cb) {\n    var cipher, input, iv, key, progress_hook, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n    __iced_k = __iced_k_noop;\n    ___iced_passed_deferral = iced.findDeferral(arguments);\n    key = _arg.key, iv = _arg.iv, input = _arg.input, progress_hook = _arg.progress_hook;\n    cipher = new Cipher({\n      key: key,\n      iv: iv\n    });\n    (function (_this) {\n      return function (__iced_k) {\n        __iced_deferrals = new iced.Deferrals(__iced_k, {\n          parent: ___iced_passed_deferral,\n          filename: \"/Users/max/src/keybase/triplesec/src/salsa20.iced\"\n        });\n        cipher.bulk_encrypt({\n          input: input,\n          progress_hook: progress_hook,\n          what: \"salsa20\"\n        }, __iced_deferrals.defer({\n          assign_fn: function () {\n            return function () {\n              return ret = arguments[0];\n            };\n          }(),\n          lineno: 256\n        }));\n\n        __iced_deferrals._fulfill();\n      };\n    })(this)(function (_this) {\n      return function () {\n        cipher.scrub();\n        return cb(ret);\n      };\n    }(this));\n  };\n\n  exports.Salsa20InnerCore = Salsa20InnerCore;\n  exports.endian_reverse = endian_reverse;\n  exports.asum = asum;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}