{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst cheerio = require(\"cheerio\");\n\nconst service_1 = require(\"./service\");\n\nclass Instagram extends service_1.Service {\n  static getBaseUrls() {\n    const baseUrls = ['https://www.instagram.com/', 'https://instagram.com/'];\n    return baseUrls;\n  }\n\n  static getProofUrl(proof) {\n    const baseUrls = this.getBaseUrls();\n    const normalizedProofUrl = this.normalizeUrl(proof);\n\n    for (let i = 0; i < baseUrls.length; i++) {\n      if (normalizedProofUrl.startsWith(\"\".concat(baseUrls[i]))) {\n        return normalizedProofUrl;\n      }\n    }\n\n    throw new Error(\"Proof url \".concat(proof.proof_url, \" is not valid for service \").concat(proof.service));\n  }\n\n  static normalizeUrl(proof) {\n    let proofUrl = proof.proof_url;\n    proofUrl = super.prefixScheme(proofUrl);\n\n    if (proofUrl.startsWith('https://instagram.com')) {\n      const tokens = proofUrl.split('https://instagram.com');\n      proofUrl = \"https://www.instagram.com\".concat(tokens[1]);\n    }\n\n    return proofUrl;\n  }\n\n  static shouldValidateIdentityInBody() {\n    return true;\n  }\n\n  static getProofIdentity(searchText) {\n    const $ = cheerio.load(searchText);\n    const username = $('meta[property=\"og:description\"]').attr('content');\n\n    if (username !== undefined && username.split(':').length > 1) {\n      return username.split(':')[0].match(/(@\\w+)/)[0].substr(1);\n    } else {\n      return '';\n    }\n  }\n\n  static getProofStatement(searchText) {\n    const $ = cheerio.load(searchText);\n    const statement = $('meta[property=\"og:description\"]').attr('content');\n\n    if (statement !== undefined && statement.split(':').length > 1) {\n      return statement.split(':')[1].trim().replace('“', '').replace('”', '');\n    } else {\n      return '';\n    }\n  }\n\n}\n\nexports.Instagram = Instagram;","map":null,"metadata":{},"sourceType":"script"}