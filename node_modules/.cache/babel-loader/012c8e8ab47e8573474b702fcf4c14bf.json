{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst crypto_1 = require(\"crypto\");\n\nconst bitcoinjs_lib_1 = require(\"bitcoinjs-lib\");\n/**\n *\n * @param numberOfBytes\n *\n * @ignore\n */\n\n\nfunction getEntropy(arg) {\n  if (!arg) {\n    arg = 32;\n  }\n\n  if (typeof arg === 'number') {\n    return crypto_1.randomBytes(arg);\n  } else {\n    return crypto_1.randomFillSync(arg);\n  }\n}\n\nexports.getEntropy = getEntropy;\n/**\n* @ignore\n*/\n\nfunction makeECPrivateKey() {\n  const keyPair = bitcoinjs_lib_1.ECPair.makeRandom({\n    rng: getEntropy\n  });\n  return keyPair.privateKey.toString('hex');\n}\n\nexports.makeECPrivateKey = makeECPrivateKey;\n/**\n* @ignore\n*/\n\nfunction publicKeyToAddress(publicKey) {\n  const publicKeyBuffer = Buffer.from(publicKey, 'hex');\n  const publicKeyHash160 = bitcoinjs_lib_1.crypto.hash160(publicKeyBuffer);\n  const address = bitcoinjs_lib_1.address.toBase58Check(publicKeyHash160, 0x00);\n  return address;\n}\n\nexports.publicKeyToAddress = publicKeyToAddress;\n/**\n* @ignore\n*/\n\nfunction getPublicKeyFromPrivate(privateKey) {\n  const keyPair = bitcoinjs_lib_1.ECPair.fromPrivateKey(Buffer.from(privateKey, 'hex'));\n  return keyPair.publicKey.toString('hex');\n}\n\nexports.getPublicKeyFromPrivate = getPublicKeyFromPrivate;","map":null,"metadata":{},"sourceType":"script"}