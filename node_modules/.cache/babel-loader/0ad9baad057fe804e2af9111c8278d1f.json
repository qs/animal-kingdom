{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst sessionData_1 = require(\"./sessionData\"); // import { BLOCKSTACK_GAIA_HUB_LABEL } from '../storage/hub'\n\n\nconst authConstants_1 = require(\"./authConstants\");\n\nconst errors_1 = require(\"../errors\"); // import { Logger } from '../logger'\n\n/**\n * An abstract class representing the SessionDataStore interface.\n\n */\n\n\nclass SessionDataStore {\n  constructor(sessionOptions) {\n    if (sessionOptions) {\n      const newSessionData = new sessionData_1.SessionData(sessionOptions);\n      this.setSessionData(newSessionData);\n    }\n  }\n\n  getSessionData() {\n    throw new Error('Abstract class');\n  }\n  /* eslint-disable */\n\n\n  setSessionData(session) {\n    throw new Error('Abstract class');\n  }\n\n  deleteSessionData() {\n    throw new Error('Abstract class');\n  }\n\n}\n\nexports.SessionDataStore = SessionDataStore;\n/**\n * Stores session data in the instance of this class.\n * @ignore\n */\n\nclass InstanceDataStore extends SessionDataStore {\n  constructor(sessionOptions) {\n    super(sessionOptions);\n\n    if (!this.sessionData) {\n      this.setSessionData(new sessionData_1.SessionData({}));\n    }\n  }\n\n  getSessionData() {\n    if (!this.sessionData) {\n      throw new errors_1.NoSessionDataError('No session data was found.');\n    }\n\n    return this.sessionData;\n  }\n\n  setSessionData(session) {\n    this.sessionData = session;\n    return true;\n  }\n\n  deleteSessionData() {\n    this.setSessionData(new sessionData_1.SessionData({}));\n    return true;\n  }\n\n}\n\nexports.InstanceDataStore = InstanceDataStore;\n/**\n * Stores session data in browser a localStorage entry.\n * @ignore\n */\n\nclass LocalStorageStore extends SessionDataStore {\n  constructor(sessionOptions) {\n    super(sessionOptions);\n\n    if (sessionOptions && sessionOptions.storeOptions && sessionOptions.storeOptions.localStorageKey && typeof sessionOptions.storeOptions.localStorageKey === 'string') {\n      this.key = sessionOptions.storeOptions.localStorageKey;\n    } else {\n      this.key = authConstants_1.LOCALSTORAGE_SESSION_KEY;\n    }\n\n    const data = localStorage.getItem(this.key);\n\n    if (!data) {\n      const sessionData = new sessionData_1.SessionData({});\n      this.setSessionData(sessionData);\n    }\n  }\n\n  getSessionData() {\n    const data = localStorage.getItem(this.key);\n\n    if (!data) {\n      throw new errors_1.NoSessionDataError('No session data was found in localStorage');\n    }\n\n    const dataJSON = JSON.parse(data);\n    return sessionData_1.SessionData.fromJSON(dataJSON);\n  }\n\n  setSessionData(session) {\n    localStorage.setItem(this.key, session.toString());\n    return true;\n  }\n\n  deleteSessionData() {\n    localStorage.removeItem(this.key);\n    this.setSessionData(new sessionData_1.SessionData({}));\n    return true;\n  }\n\n}\n\nexports.LocalStorageStore = LocalStorageStore;","map":null,"metadata":{},"sourceType":"script"}