{"ast":null,"code":"// Generated by IcedCoffeeScript 108.0.8\n(function () {\n  var ADRBG, PRNG, WordArray, XOR, browser_rng, e, generate, iced, m, more_entropy, native_rng, rng, util, __iced_k, __iced_k_noop, _browser_rng_primitive, _native_rng, _prng, _ref, _ref1;\n\n  iced = require('iced-runtime');\n\n  __iced_k = __iced_k_noop = function () {};\n\n  more_entropy = require('more-entropy');\n  ADRBG = require('./drbg').ADRBG;\n  WordArray = require('./wordarray').WordArray;\n  XOR = require('./combine').XOR;\n  util = require('./util');\n  _browser_rng_primitive = null;\n\n  browser_rng = function (n) {\n    var v;\n    v = new Uint8Array(n);\n\n    _browser_rng_primitive(v);\n\n    return new Buffer(v);\n  };\n\n  _browser_rng_primitive = (m = typeof window !== \"undefined\" && window !== null ? (_ref = window.crypto) != null ? _ref.getRandomValues : void 0 : void 0) != null ? m.bind(window.crypto) : (m = typeof window !== \"undefined\" && window !== null ? (_ref1 = window.msCrypto) != null ? _ref1.getRandomValues : void 0 : void 0) != null ? m.bind(window.msCrypto) : null;\n\n  if (_browser_rng_primitive != null) {\n    _native_rng = browser_rng;\n  } else {\n    try {\n      rng = require('cry' + 'pto').rng;\n\n      if (rng != null) {\n        _native_rng = rng;\n      }\n    } catch (_error) {\n      e = _error;\n    }\n  }\n\n  native_rng = function (x) {\n    if (_native_rng == null) {\n      throw new Error('No rng found; tried requiring \"crypto\" and window.crypto');\n    }\n\n    return _native_rng(x);\n  };\n\n  PRNG = function () {\n    function PRNG() {\n      this.meg = new more_entropy.Generator();\n      this.adrbg = new ADRBG(function (_this) {\n        return function (n, cb) {\n          return _this.gen_seed(n, cb);\n        };\n      }(this), XOR.sign);\n    }\n\n    PRNG.prototype.now_to_buffer = function () {\n      var buf, d, ms, s;\n      d = Date.now();\n      ms = d % 1000;\n      s = Math.floor(d / 1000);\n      buf = new Buffer(8);\n      buf.writeUInt32BE(s, 0);\n      buf.writeUInt32BE(ms, 4);\n      return buf;\n    };\n\n    PRNG.prototype.gen_seed = function (nbits, cb) {\n      var b, bufs, cat, nbytes, wa, words, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      nbytes = nbits / 8;\n      bufs = [];\n      bufs.push(this.now_to_buffer());\n      (function (_this) {\n        return function (__iced_k) {\n          __iced_deferrals = new iced.Deferrals(__iced_k, {\n            parent: ___iced_passed_deferral,\n            filename: \"/Users/max/src/keybase/triplesec/src/prng.iced\",\n            funcname: \"PRNG.gen_seed\"\n          });\n\n          _this.meg.generate(nbits, __iced_deferrals.defer({\n            assign_fn: function () {\n              return function () {\n                return words = arguments[0];\n              };\n            }(),\n            lineno: 83\n          }));\n\n          __iced_deferrals._fulfill();\n        };\n      })(this)(function (_this) {\n        return function () {\n          var _i, _len;\n\n          bufs.push(_this.now_to_buffer());\n          bufs.push(new Buffer(words));\n          bufs.push(native_rng(nbytes));\n          bufs.push(_this.now_to_buffer());\n          cat = Buffer.concat(bufs);\n          wa = WordArray.from_buffer(cat);\n          util.scrub_buffer(cat);\n\n          for (_i = 0, _len = bufs.length; _i < _len; _i++) {\n            b = bufs[_i];\n            util.scrub_buffer(b);\n          }\n\n          return cb(wa);\n        };\n      }(this));\n    };\n\n    PRNG.prototype.generate = function (n, cb) {\n      return this.adrbg.generate(n, cb);\n    };\n\n    return PRNG;\n  }();\n\n  _prng = null;\n\n  generate = function (n, cb) {\n    if (_prng == null) {\n      _prng = new PRNG();\n    }\n\n    return _prng.generate(n, cb);\n  };\n\n  exports.PRNG = PRNG;\n  exports.generate = generate;\n  exports.native_rng = native_rng;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}