{"ast":null,"code":"\"use strict\";\n/**\n * This logic is in a separate file with no dependencies so that it can be\n * loaded and executed as soon as possible to fulfill the purpose of the protocol\n * detection technique. The effectiveness of this is obviously subject to how web\n * apps bundle/consume the blockstack.js lib.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst GLOBAL_DETECTION_CACHE_KEY = '_blockstackDidCheckEchoReply';\nconst ECHO_REPLY_PARAM = 'echoReply';\nconst AUTH_CONTINUATION_PARAM = 'authContinuation';\n/**\n * Checks if the current window location URL contains an 'echoReply' parameter\n * which indicates that this page was only opened to signal back to the originating\n * tab that the protocol handler is installed.\n * If found, then localStorage events are used to notify the other tab,\n * and this page is redirected back to the Blockstack authenticator URL.\n * This function caches its result and will not trigger multiple redirects when\n * invoked multiple times.\n * @returns True if detected and the page will be automatically redirected.\n * @hidden\n */\n\nfunction protocolEchoReplyDetection() {\n  // Check that the `window` APIs exist\n  let globalScope;\n\n  if (typeof self !== 'undefined') {\n    globalScope = self;\n  } else if (typeof window !== 'undefined') {\n    globalScope = window;\n  } else {\n    // Exit detection function - we are not running in a browser environment.\n    return false;\n  }\n\n  if (!globalScope.location || !globalScope.localStorage || !globalScope.URLSearchParams) {\n    // Exit detection function - we are not running in a browser environment.\n    return false;\n  } // Avoid performing the check twice and triggered multiple redirect timers.\n\n\n  const existingDetection = globalScope[GLOBAL_DETECTION_CACHE_KEY];\n\n  if (typeof existingDetection === 'boolean') {\n    return existingDetection;\n  }\n\n  const searchParams = new globalScope.URLSearchParams(globalScope.location.search);\n  const echoReplyParam = searchParams.get(ECHO_REPLY_PARAM);\n\n  if (echoReplyParam) {\n    globalScope[GLOBAL_DETECTION_CACHE_KEY] = true; // Use localStorage to notify originated tab that protocol handler is available and working.\n\n    const echoReplyKey = \"echo-reply-\".concat(echoReplyParam); // Set the echo-reply result in localStorage for the other window to see.\n\n    globalScope.localStorage.setItem(echoReplyKey, 'success'); // Redirect back to the localhost auth url, as opposed to another protocol launch.\n    // This will re-use the same tab rather than creating another useless one.\n\n    globalScope.setTimeout(() => {\n      const authContinuationParam = searchParams.get(AUTH_CONTINUATION_PARAM);\n      globalScope.location.href = authContinuationParam;\n    }, 10);\n    return true;\n  }\n\n  return false;\n}\n\nexports.protocolEchoReplyDetection = protocolEchoReplyDetection;","map":null,"metadata":{},"sourceType":"script"}