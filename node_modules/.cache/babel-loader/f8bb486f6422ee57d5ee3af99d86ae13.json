{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst config_1 = require(\"../config\");\n/**\n* @ignore\n*/\n\n\nfunction isNameValid(fullyQualifiedName = '') {\n  const NAME_PART_RULE = /^[a-z0-9\\-_+]+$/;\n  const LENGTH_MAX_NAME = 37;\n\n  if (!fullyQualifiedName || fullyQualifiedName.length > LENGTH_MAX_NAME) {\n    return Promise.resolve(false);\n  }\n\n  const nameParts = fullyQualifiedName.split('.');\n\n  if (nameParts.length !== 2) {\n    return Promise.resolve(false);\n  }\n\n  return Promise.resolve(nameParts.reduce((agg, namePart) => {\n    if (!agg) {\n      return false;\n    } else {\n      return NAME_PART_RULE.test(namePart);\n    }\n  }, true));\n}\n/**\n* @ignore\n*/\n\n\nfunction isNamespaceValid(namespaceID) {\n  const NAMESPACE_RULE = /^[a-z0-9\\-_]{1,19}$/;\n  return Promise.resolve(namespaceID.match(NAMESPACE_RULE) !== null);\n}\n/**\n* @ignore\n*/\n\n\nfunction isNameAvailable(fullyQualifiedName) {\n  return config_1.config.network.getNameInfo(fullyQualifiedName).then(() => false).catch(e => {\n    if (e.message === 'Name not found') {\n      return true;\n    } else {\n      throw e;\n    }\n  });\n}\n/**\n* @ignore\n*/\n\n\nfunction isNamespaceAvailable(namespaceID) {\n  return config_1.config.network.getNamespaceInfo(namespaceID).then(() => false).catch(e => {\n    if (e.message === 'Namespace not found') {\n      return true;\n    } else {\n      throw e;\n    }\n  });\n}\n/**\n* @ignore\n*/\n\n\nfunction ownsName(fullyQualifiedName, ownerAddress) {\n  return config_1.config.network.getNameInfo(fullyQualifiedName).then(nameInfo => nameInfo.address === ownerAddress).catch(e => {\n    if (e.message === 'Name not found') {\n      return false;\n    } else {\n      throw e;\n    }\n  });\n}\n/**\n* @ignore\n*/\n\n\nfunction revealedNamespace(namespaceID, revealAddress) {\n  return config_1.config.network.getNamespaceInfo(namespaceID).then(namespaceInfo => namespaceInfo.recipient_address === revealAddress).catch(e => {\n    if (e.message === 'Namespace not found') {\n      return false;\n    } else {\n      throw e;\n    }\n  });\n}\n/**\n* @ignore\n*/\n\n\nfunction namespaceIsReady(namespaceID) {\n  return config_1.config.network.getNamespaceInfo(namespaceID).then(namespaceInfo => namespaceInfo.ready).catch(e => {\n    if (e.message === 'Namespace not found') {\n      return false;\n    } else {\n      throw e;\n    }\n  });\n}\n/**\n* @ignore\n*/\n\n\nfunction namespaceIsRevealed(namespaceID) {\n  return config_1.config.network.getNamespaceInfo(namespaceID).then(namespaceInfo => !namespaceInfo.ready).catch(e => {\n    if (e.message === 'Namespace not found') {\n      return false;\n    } else {\n      throw e;\n    }\n  });\n}\n/**\n* @ignore\n*/\n\n\nfunction isInGracePeriod(fullyQualifiedName) {\n  const network = config_1.config.network;\n  return Promise.all([network.getNameInfo(fullyQualifiedName), network.getBlockHeight(), network.getGracePeriod(fullyQualifiedName)]).then(([nameInfo, blockHeight, gracePeriod]) => {\n    const expiresAt = nameInfo.expire_block;\n    return blockHeight >= expiresAt && blockHeight < gracePeriod + expiresAt;\n  }).catch(e => {\n    if (e.message === 'Name not found') {\n      return false;\n    } else {\n      throw e;\n    }\n  });\n}\n/**\n* @ignore\n*/\n\n\nfunction addressCanReceiveName(address) {\n  return config_1.config.network.getNamesOwned(address).then(names => Promise.all(names.map(name => isNameValid(name))).then(validNames => validNames.filter(nameValid => nameValid).length < 25));\n}\n/**\n* @ignore\n*/\n\n\nfunction isAccountSpendable(address, tokenType, blockHeight) {\n  return config_1.config.network.getAccountStatus(address, tokenType).then(accountStatus => accountStatus.transfer_send_block_id >= blockHeight);\n}\n/**\n* @ignore\n*/\n\n\nexports.safety = {\n  addressCanReceiveName,\n  isInGracePeriod,\n  ownsName,\n  isNameAvailable,\n  isNameValid,\n  isNamespaceValid,\n  isNamespaceAvailable,\n  revealedNamespace,\n  namespaceIsReady,\n  namespaceIsRevealed,\n  isAccountSpendable\n};","map":null,"metadata":{},"sourceType":"script"}