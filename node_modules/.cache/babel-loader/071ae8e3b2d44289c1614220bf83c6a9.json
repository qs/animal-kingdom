{"ast":null,"code":"// Generated by IcedCoffeeScript 108.0.8\n(function () {\n  var default_delay, iced, uint_max, __iced_k, __iced_k_noop;\n\n  iced = require('iced-runtime');\n\n  __iced_k = __iced_k_noop = function () {};\n\n  uint_max = Math.pow(2, 32);\n\n  exports.fixup_uint32 = function (x) {\n    var ret, x_pos;\n    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;\n    return ret;\n  };\n\n  exports.scrub_buffer = function (b) {\n    var i, n_full_words;\n    n_full_words = b.length >> 2;\n    i = 0;\n\n    while (i < n_full_words) {\n      b.writeUInt32LE(0, i);\n      i += 4;\n    }\n\n    while (i < b.length) {\n      b.writeUInt8(0, i);\n      i++;\n    }\n\n    return false;\n  };\n\n  exports.copy_buffer = function (b) {\n    var i, ret, _i, _ref;\n\n    ret = new Buffer(b.length);\n\n    for (i = _i = 0, _ref = b.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n      ret.writeUInt8(b.readUInt8(i), i);\n    }\n\n    return ret;\n  };\n\n  exports.scrub_vec = function (v) {\n    var i, _i, _ref;\n\n    for (i = _i = 0, _ref = v.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n      v[i] = 0;\n    }\n\n    return false;\n  };\n\n  exports.default_delay = default_delay = function (i, n, cb) {\n    var ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n    __iced_k = __iced_k_noop;\n    ___iced_passed_deferral = iced.findDeferral(arguments);\n    (function (_this) {\n      return function (__iced_k) {\n        if (typeof setImmediate !== \"undefined\" && setImmediate !== null) {\n          (function (__iced_k) {\n            __iced_deferrals = new iced.Deferrals(__iced_k, {\n              parent: ___iced_passed_deferral,\n              filename: \"/Users/max/src/keybase/triplesec/src/util.iced\"\n            });\n            setImmediate(__iced_deferrals.defer({\n              lineno: 45\n            }));\n\n            __iced_deferrals._fulfill();\n          })(__iced_k);\n        } else {\n          (function (__iced_k) {\n            __iced_deferrals = new iced.Deferrals(__iced_k, {\n              parent: ___iced_passed_deferral,\n              filename: \"/Users/max/src/keybase/triplesec/src/util.iced\"\n            });\n            setTimeout(__iced_deferrals.defer({\n              lineno: 47\n            }), 1);\n\n            __iced_deferrals._fulfill();\n          })(__iced_k);\n        }\n      };\n    })(this)(function (_this) {\n      return function () {\n        return cb();\n      };\n    }(this));\n  };\n\n  exports.buffer_cmp_ule = function (b1, b2) {\n    var I, J, i, j, x, y;\n    i = j = 0;\n    I = b1.length;\n    J = b2.length;\n\n    while (i < I && b1.readUInt8(i) === 0) {\n      i++;\n    }\n\n    while (j < J && b2.readUInt8(j) === 0) {\n      j++;\n    }\n\n    if (I - i > J - j) {\n      return 1;\n    } else if (J - j > I - i) {\n      return -1;\n    }\n\n    while (i < I) {\n      if ((x = b1.readUInt8(i)) < (y = b2.readUInt8(j))) {\n        return -1;\n      } else if (y < x) {\n        return 1;\n      }\n\n      i++;\n      j++;\n    }\n\n    return 0;\n  };\n\n  exports.bulk = function (n_input_bytes, _arg, _arg1) {\n    var call_ph, cb, default_n, delay, finalize, i, left, n, n_words, progress_hook, ret, total_words, update, what, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n    __iced_k = __iced_k_noop;\n    ___iced_passed_deferral = iced.findDeferral(arguments);\n    update = _arg.update, finalize = _arg.finalize, default_n = _arg.default_n;\n    delay = _arg1.delay, n = _arg1.n, cb = _arg1.cb, what = _arg1.what, progress_hook = _arg1.progress_hook;\n    i = 0;\n    left = 0;\n    total_words = Math.ceil(n_input_bytes / 4);\n    delay || (delay = default_delay);\n    n || (n = default_n);\n\n    call_ph = function (i) {\n      return typeof progress_hook === \"function\" ? progress_hook({\n        what: what,\n        i: i,\n        total: total_words\n      }) : void 0;\n    };\n\n    call_ph(0);\n    (function (_this) {\n      return function (__iced_k) {\n        var _while;\n\n        _while = function (__iced_k) {\n          var _break, _continue, _next;\n\n          _break = __iced_k;\n\n          _continue = function () {\n            return iced.trampoline(function () {\n              return _while(__iced_k);\n            });\n          };\n\n          _next = _continue;\n\n          if (!((left = total_words - i) > 0)) {\n            return _break();\n          } else {\n            n_words = Math.min(n, left);\n            update(i, i + n_words);\n            call_ph(i);\n\n            (function (__iced_k) {\n              __iced_deferrals = new iced.Deferrals(__iced_k, {\n                parent: ___iced_passed_deferral,\n                filename: \"/Users/max/src/keybase/triplesec/src/util.iced\",\n                funcname: \"bulk\"\n              });\n              delay(i, total_words, __iced_deferrals.defer({\n                lineno: 105\n              }));\n\n              __iced_deferrals._fulfill();\n            })(function () {\n              return _next(i += n_words);\n            });\n          }\n        };\n\n        _while(__iced_k);\n      };\n    })(this)(function (_this) {\n      return function () {\n        call_ph(total_words);\n        ret = finalize();\n        return cb(ret);\n      };\n    }(this));\n  };\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}