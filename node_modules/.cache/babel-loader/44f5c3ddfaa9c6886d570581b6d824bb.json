{"ast":null,"code":"// Generated by IcedCoffeeScript 108.0.8\n(function () {\n  var ADRBG, DRBG, Lock, WordArray, XOR, hmac, iced, sha3, sha512, __iced_k, __iced_k_noop;\n\n  iced = require('iced-runtime');\n\n  __iced_k = __iced_k_noop = function () {};\n\n  hmac = require('./hmac');\n  XOR = require('./combine').XOR;\n  sha512 = require('./sha512');\n  sha3 = require('./sha3');\n  WordArray = require('./wordarray').WordArray;\n  Lock = require('iced-lock').Lock;\n\n  DRBG = function () {\n    function DRBG(entropy, personalization_string, hmac_func) {\n      this.hmac = hmac_func || hmac.sign;\n      this.security_strength = 256;\n      entropy = this.check_entropy(entropy);\n      personalization_string || (personalization_string = new WordArray([]));\n\n      this._instantiate(entropy, personalization_string);\n    }\n\n    DRBG.prototype.check_entropy = function (entropy, reseed) {\n      if (reseed == null) {\n        reseed = false;\n      }\n\n      if (entropy.sigBytes * 8 * 2 < (reseed ? 2 : 3) * this.security_strength) {\n        throw new Error(\"entropy must be at least \" + 1.5 * this.security_strength + \" bits.\");\n      }\n\n      return entropy;\n    };\n\n    DRBG.prototype._hmac = function (key, input) {\n      return this.hmac({\n        key: key,\n        input: input\n      });\n    };\n\n    DRBG.prototype._update = function (provided_data) {\n      var V, V_in;\n      V = new WordArray([0], 1);\n\n      if (provided_data != null) {\n        V = V.concat(provided_data);\n      }\n\n      V_in = this.V.clone().concat(V);\n      this.K = this._hmac(this.K, V_in);\n      V_in.scrub();\n      V.scrub();\n      this.V = this._hmac(this.K, this.V);\n\n      if (provided_data != null) {\n        V_in = this.V.clone().concat(new WordArray([1 << 24], 1)).concat(provided_data);\n        this.K = this._hmac(this.K, V_in);\n        V_in.scrub();\n        this.V = this._hmac(this.K, this.V);\n      }\n\n      return provided_data != null ? provided_data.scrub() : void 0;\n    };\n\n    DRBG.prototype._instantiate = function (entropy, personalization_string) {\n      var i, n, seed_material;\n      seed_material = entropy.concat(personalization_string);\n      n = 64;\n      this.K = WordArray.from_buffer(new Buffer(function () {\n        var _i, _results;\n\n        _results = [];\n\n        for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {\n          _results.push(0);\n        }\n\n        return _results;\n      }()));\n      this.V = WordArray.from_buffer(new Buffer(function () {\n        var _i, _results;\n\n        _results = [];\n\n        for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {\n          _results.push(1);\n        }\n\n        return _results;\n      }()));\n\n      this._update(seed_material);\n\n      entropy.scrub();\n      return this.reseed_counter = 1;\n    };\n\n    DRBG.prototype.reseed = function (entropy) {\n      this._update(this.check_entropy(entropy, true));\n\n      return this.reseed_counter = 1;\n    };\n\n    DRBG.prototype.generate = function (num_bytes) {\n      var i, tmp, _ref;\n\n      if (num_bytes * 8 > 7500) {\n        throw new Error(\"generate cannot generate > 7500 bits in 1 call.\");\n      }\n\n      if (this.reseed_counter >= 10000) {\n        throw new Error(\"Need a reseed!\");\n      }\n\n      tmp = [];\n      i = 0;\n\n      while (tmp.length === 0 || tmp.length * tmp[0].length * 4 < num_bytes) {\n        this.V = this._hmac(this.K, this.V);\n        tmp.push(this.V.words);\n      }\n\n      this._update();\n\n      this.reseed_counter += 1;\n      return new WordArray((_ref = []).concat.apply(_ref, tmp)).truncate(num_bytes);\n    };\n\n    return DRBG;\n  }();\n\n  ADRBG = function () {\n    function ADRBG(gen_seed, hmac) {\n      this.gen_seed = gen_seed;\n      this.hmac = hmac;\n      this.drbg = null;\n      this.lock = new Lock();\n    }\n\n    ADRBG.prototype.generate = function (n, cb) {\n      var ret, seed, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      (function (_this) {\n        return function (__iced_k) {\n          __iced_deferrals = new iced.Deferrals(__iced_k, {\n            parent: ___iced_passed_deferral,\n            filename: \"/Users/max/src/keybase/triplesec/src/drbg.iced\",\n            funcname: \"ADRBG.generate\"\n          });\n\n          _this.lock.acquire(__iced_deferrals.defer({\n            lineno: 148\n          }));\n\n          __iced_deferrals._fulfill();\n        };\n      })(this)(function (_this) {\n        return function () {\n          (function (__iced_k) {\n            if (_this.drbg == null) {\n              (function (__iced_k) {\n                __iced_deferrals = new iced.Deferrals(__iced_k, {\n                  parent: ___iced_passed_deferral,\n                  filename: \"/Users/max/src/keybase/triplesec/src/drbg.iced\",\n                  funcname: \"ADRBG.generate\"\n                });\n\n                _this.gen_seed(256, __iced_deferrals.defer({\n                  assign_fn: function () {\n                    return function () {\n                      return seed = arguments[0];\n                    };\n                  }(),\n                  lineno: 150\n                }));\n\n                __iced_deferrals._fulfill();\n              })(function () {\n                return __iced_k(_this.drbg = new DRBG(seed, null, _this.hmac));\n              });\n            } else {\n              return __iced_k();\n            }\n          })(function () {\n            (function (__iced_k) {\n              if (_this.drbg.reseed_counter > 100) {\n                (function (__iced_k) {\n                  __iced_deferrals = new iced.Deferrals(__iced_k, {\n                    parent: ___iced_passed_deferral,\n                    filename: \"/Users/max/src/keybase/triplesec/src/drbg.iced\",\n                    funcname: \"ADRBG.generate\"\n                  });\n\n                  _this.gen_seed(256, __iced_deferrals.defer({\n                    assign_fn: function () {\n                      return function () {\n                        return seed = arguments[0];\n                      };\n                    }(),\n                    lineno: 153\n                  }));\n\n                  __iced_deferrals._fulfill();\n                })(function () {\n                  return __iced_k(_this.drbg.reseed(seed));\n                });\n              } else {\n                return __iced_k();\n              }\n            })(function () {\n              ret = _this.drbg.generate(n);\n\n              _this.lock.release();\n\n              return cb(ret);\n            });\n          });\n        };\n      }(this));\n    };\n\n    return ADRBG;\n  }();\n\n  exports.DRBG = DRBG;\n  exports.ADRBG = ADRBG;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}