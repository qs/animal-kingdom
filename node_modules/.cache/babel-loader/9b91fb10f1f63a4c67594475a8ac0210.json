{"ast":null,"code":"// Generated by IcedCoffeeScript 1.7.1-f\n(function () {\n  var Generator, iced, __iced_k, __iced_k_noop;\n\n  iced = require('iced-runtime');\n\n  __iced_k = __iced_k_noop = function () {};\n\n  Generator = Generator = function () {\n    function Generator(opts) {\n      opts = opts || {};\n      this.lazy_loop_delay = opts.lazy_loop_delay || 30;\n      this.loop_delay = opts.loop_delay || 5;\n      this.work_min = opts.work_min || 1;\n      this.auto_stop_bits = opts.auto_stop_bits || 4096;\n      this.max_bits_per_delta = opts.max_bits_per_delta || 4;\n      this.auto_stop = opts.auto_stop ? opts.auto_stop : true;\n      this.entropies = [];\n      this.running = true;\n      this.is_generating = false;\n      this.timer_race_loop();\n    }\n\n    Generator.prototype.generate = function (bits_wanted, cb) {\n      var e, harvested_bits, res, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      this.is_generating = true;\n\n      if (!this.running) {\n        this.resume();\n      }\n\n      harvested_bits = 0;\n      res = [];\n      (function (_this) {\n        return function (__iced_k) {\n          var _results, _while;\n\n          _results = [];\n\n          _while = function (__iced_k) {\n            var _break, _continue, _next;\n\n            _break = function () {\n              return __iced_k(_results);\n            };\n\n            _continue = function () {\n              return iced.trampoline(function () {\n                return _while(__iced_k);\n              });\n            };\n\n            _next = function (__iced_next_arg) {\n              _results.push(__iced_next_arg);\n\n              return _continue();\n            };\n\n            if (!(harvested_bits < bits_wanted)) {\n              return _break();\n            } else {\n              (function (__iced_k) {\n                if (_this.entropies.length) {\n                  e = _this.entropies.splice(0, 1)[0];\n                  harvested_bits += e[1];\n                  return __iced_k(res.push(e[0]));\n                } else {\n                  (function (__iced_k) {\n                    __iced_deferrals = new iced.Deferrals(__iced_k, {\n                      parent: ___iced_passed_deferral,\n                      filename: \"/Users/chris/git/more-entropy/src/generator.iced\",\n                      funcname: \"Generator.generate\"\n                    });\n\n                    _this.delay(__iced_deferrals.defer({\n                      lineno: 28\n                    }));\n\n                    __iced_deferrals._fulfill();\n                  })(__iced_k);\n                }\n              })(_next);\n            }\n          };\n\n          _while(__iced_k);\n        };\n      })(this)(function (_this) {\n        return function () {\n          if (_this.auto_stop) {\n            _this.stop();\n          }\n\n          _this.is_generating = false;\n          return cb(res);\n        };\n      }(this));\n    };\n\n    Generator.prototype.stop = function () {\n      return this.running = false;\n    };\n\n    Generator.prototype.resume = function () {\n      this.running = true;\n      return this.timer_race_loop();\n    };\n\n    Generator.prototype.reset = function () {\n      this.entropies = [];\n      return this.total_bits = 0;\n    };\n\n    Generator.prototype.count_unused_bits = function () {\n      var bits, e, _i, _len, _ref;\n\n      bits = 0;\n      _ref = this.entropies;\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        e = _ref[_i];\n        bits += e[1];\n      }\n\n      return bits;\n    };\n\n    Generator.prototype.delay = function (cb) {\n      var delay, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      delay = this.is_generating ? this.loop_delay : this.lazy_loop_delay;\n      (function (_this) {\n        return function (__iced_k) {\n          __iced_deferrals = new iced.Deferrals(__iced_k, {\n            parent: ___iced_passed_deferral,\n            filename: \"/Users/chris/git/more-entropy/src/generator.iced\",\n            funcname: \"Generator.delay\"\n          });\n          setTimeout(__iced_deferrals.defer({\n            lineno: 50\n          }), delay);\n\n          __iced_deferrals._fulfill();\n        };\n      })(this)(function (_this) {\n        return function () {\n          return cb();\n        };\n      }(this));\n    };\n\n    Generator.prototype.timer_race_loop = function () {\n      var ___iced_passed_deferral, __iced_k, _results, _while;\n\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      this._last_count = null;\n      _results = [];\n\n      _while = function (_this) {\n        var count, delta, entropy, v, __iced_deferrals;\n\n        return function (__iced_k) {\n          var _break, _continue, _next;\n\n          _break = function () {\n            return __iced_k(_results);\n          };\n\n          _continue = function () {\n            return iced.trampoline(function () {\n              return _while(__iced_k);\n            });\n          };\n\n          _next = function (__iced_next_arg) {\n            _results.push(__iced_next_arg);\n\n            return _continue();\n          };\n\n          if (!_this.running) {\n            return _break();\n          } else {\n            if (_this.count_unused_bits() < _this.auto_stop_bits) {\n              count = _this.millisecond_count();\n\n              if (_this._last_count != null && (delta = count - _this._last_count)) {\n                entropy = Math.floor(_this.log_2(Math.abs(delta)));\n                entropy = Math.min(_this.max_bits_per_delta, entropy);\n                v = [delta, entropy];\n\n                _this.entropies.push(v);\n              }\n\n              _this._last_count = count;\n            }\n\n            (function (__iced_k) {\n              __iced_deferrals = new iced.Deferrals(__iced_k, {\n                parent: ___iced_passed_deferral,\n                filename: \"/Users/chris/git/more-entropy/src/generator.iced\",\n                funcname: \"Generator.timer_race_loop\"\n              });\n\n              _this.delay(__iced_deferrals.defer({\n                lineno: 64\n              }));\n\n              __iced_deferrals._fulfill();\n            })(_next);\n          }\n        };\n      }(this);\n\n      _while(__iced_k);\n    };\n\n    Generator.prototype.log_2 = function (x) {\n      return Math.log(x) / Math.LN2;\n    };\n\n    Generator.prototype.millisecond_count = function () {\n      var d, i, x;\n      d = Date.now();\n      i = x = 0;\n\n      while (Date.now() < d + this.work_min + 1) {\n        i++;\n        x = Math.sin(Math.sqrt(Math.log(i + x)));\n      }\n\n      return i;\n    };\n\n    return Generator;\n  }();\n\n  if (typeof window !== \"undefined\" && window !== null) {\n    window.Generator = Generator;\n  }\n\n  if (typeof exports !== \"undefined\" && exports !== null) {\n    exports.Generator = Generator;\n  }\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}