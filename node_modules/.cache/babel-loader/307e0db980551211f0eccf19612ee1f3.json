{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // @ts-ignore: Could not find a declaration file for module\n\nconst zone_file_1 = require(\"zone-file\");\n\nconst profileTokens_1 = require(\"./profileTokens\");\n\nconst person_1 = require(\"./profileSchemas/person\");\n\nconst logger_1 = require(\"../logger\");\n\nconst fetchUtil_1 = require(\"../fetchUtil\");\n/**\n *\n * @param origin\n * @param tokenFileUrl\n *\n * @ignore\n */\n\n\nfunction makeProfileZoneFile(origin, tokenFileUrl) {\n  if (tokenFileUrl.indexOf('://') < 0) {\n    throw new Error('Invalid token file url');\n  }\n\n  const urlScheme = tokenFileUrl.split('://')[0];\n  const urlParts = tokenFileUrl.split('://')[1].split('/');\n  const domain = urlParts[0];\n  const pathname = \"/\".concat(urlParts.slice(1).join('/'));\n  const zoneFile = {\n    $origin: origin,\n    $ttl: 3600,\n    uri: [{\n      name: '_http._tcp',\n      priority: 10,\n      weight: 1,\n      target: \"\".concat(urlScheme, \"://\").concat(domain).concat(pathname)\n    }]\n  };\n  const zoneFileTemplate = '{$origin}\\n{$ttl}\\n{uri}\\n';\n  return zone_file_1.makeZoneFile(zoneFile, zoneFileTemplate);\n}\n\nexports.makeProfileZoneFile = makeProfileZoneFile;\n/**\n *\n * @param zoneFileJson\n *\n * @ignore\n */\n\nfunction getTokenFileUrl(zoneFileJson) {\n  if (!zoneFileJson.hasOwnProperty('uri')) {\n    return null;\n  }\n\n  if (!Array.isArray(zoneFileJson.uri)) {\n    return null;\n  }\n\n  if (zoneFileJson.uri.length < 1) {\n    return null;\n  }\n\n  const firstUriRecord = zoneFileJson.uri[0];\n\n  if (!firstUriRecord.hasOwnProperty('target')) {\n    return null;\n  }\n\n  let tokenFileUrl = firstUriRecord.target;\n\n  if (tokenFileUrl.startsWith('https')) {// pass\n  } else if (tokenFileUrl.startsWith('http')) {// pass\n  } else {\n    tokenFileUrl = \"https://\".concat(tokenFileUrl);\n  }\n\n  return tokenFileUrl;\n}\n\nexports.getTokenFileUrl = getTokenFileUrl;\n/**\n *\n * @param zoneFile\n * @param publicKeyOrAddress\n *\n * @ignore\n */\n\nfunction resolveZoneFileToProfile(zoneFile, publicKeyOrAddress) {\n  return new Promise((resolve, reject) => {\n    let zoneFileJson = null;\n\n    try {\n      zoneFileJson = zone_file_1.parseZoneFile(zoneFile);\n\n      if (!zoneFileJson.hasOwnProperty('$origin')) {\n        zoneFileJson = null;\n      }\n    } catch (e) {\n      reject(e);\n    }\n\n    let tokenFileUrl = null;\n\n    if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n      tokenFileUrl = getTokenFileUrl(zoneFileJson);\n    } else {\n      let profile = null;\n\n      try {\n        profile = JSON.parse(zoneFile);\n        profile = person_1.Person.fromLegacyFormat(profile).profile();\n      } catch (error) {\n        reject(error);\n      }\n\n      resolve(profile);\n      return;\n    }\n\n    if (tokenFileUrl) {\n      fetchUtil_1.fetchPrivate(tokenFileUrl).then(response => response.text()).then(responseText => JSON.parse(responseText)).then(responseJson => {\n        const tokenRecords = responseJson;\n        const profile = profileTokens_1.extractProfile(tokenRecords[0].token, publicKeyOrAddress);\n        resolve(profile);\n      }).catch(error => {\n        logger_1.Logger.error(\"resolveZoneFileToProfile: error fetching token file \".concat(tokenFileUrl, \": \").concat(error));\n        reject(error);\n      });\n    } else {\n      logger_1.Logger.debug('Token file url not found. Resolving to blank profile.');\n      resolve({});\n    }\n  });\n}\n\nexports.resolveZoneFileToProfile = resolveZoneFileToProfile;","map":null,"metadata":{},"sourceType":"script"}