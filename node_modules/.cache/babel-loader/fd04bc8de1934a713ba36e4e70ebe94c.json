{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeZoneFile = makeZoneFile;\n\nvar _zoneFileTemplate = require(\"./zoneFileTemplate\");\n\nfunction makeZoneFile(jsonZoneFile, template = (0, _zoneFileTemplate.getZoneFileTemplate)()) {\n  template = processOrigin(jsonZoneFile['$origin'], template);\n  template = processTTL(jsonZoneFile['$ttl'], template);\n  template = processSOA(jsonZoneFile['soa'], template);\n  template = processNS(jsonZoneFile['ns'], template);\n  template = processA(jsonZoneFile['a'], template);\n  template = processAAAA(jsonZoneFile['aaaa'], template);\n  template = processCNAME(jsonZoneFile['cname'], template);\n  template = processMX(jsonZoneFile['mx'], template);\n  template = processPTR(jsonZoneFile['ptr'], template);\n  template = processTXT(jsonZoneFile['txt'], template);\n  template = processSRV(jsonZoneFile['srv'], template);\n  template = processSPF(jsonZoneFile['spf'], template);\n  template = processURI(jsonZoneFile['uri'], template);\n  template = processValues(jsonZoneFile, template);\n  return template.replace(/\\n{2,}/gim, '\\n\\n');\n}\n\n;\n\nfunction processOrigin(data, template) {\n  let ret = '';\n\n  if (typeof data !== 'undefined') {\n    ret += '$ORIGIN ' + data;\n  }\n\n  return template.replace('{$origin}', ret);\n}\n\n;\n\nfunction processTTL(data, template) {\n  let ret = '';\n\n  if (typeof data !== 'undefined') {\n    ret += '$TTL ' + data;\n  }\n\n  return template.replace('{$ttl}', ret);\n}\n\n;\n\nfunction processSOA(data, template) {\n  let ret = template;\n\n  if (typeof data !== 'undefined') {\n    data.name = data.name || '@';\n    data.ttl = data.ttl || '';\n\n    for (const key in data) {\n      const value = data[key];\n      ret = ret.replace('{' + key + '}', value + '\\t');\n    }\n  }\n\n  return ret;\n}\n\n;\n\nfunction processNS(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tNS\\t' + record.host + '\\n';\n    }\n  }\n\n  return template.replace('{ns}', ret);\n}\n\n;\n\nfunction processA(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tA\\t' + record.ip + '\\n';\n    }\n  }\n\n  return template.replace('{a}', ret);\n}\n\n;\n\nfunction processAAAA(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tAAAA\\t' + record.ip + '\\n';\n    }\n  }\n\n  return template.replace('{aaaa}', ret);\n}\n\n;\n\nfunction processCNAME(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tCNAME\\t' + record.alias + '\\n';\n    }\n  }\n\n  return template.replace('{cname}', ret);\n}\n\n;\n\nfunction processMX(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tMX\\t' + record.preference + '\\t' + record.host + '\\n';\n    }\n  }\n\n  return template.replace('{mx}', ret);\n}\n\n;\n\nfunction processPTR(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tPTR\\t' + record.host + '\\n';\n    }\n  }\n\n  return template.replace('{ptr}', ret);\n}\n\n;\n\nfunction processTXT(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tTXT\\t';\n      const txtData = record.txt;\n\n      if (typeof txtData === 'string') {\n        ret += '\"' + txtData + '\"';\n      } else if (txtData instanceof Array) {\n        ret += txtData.map(function (datum) {\n          return '\"' + datum + '\"';\n        }).join(' ');\n      }\n\n      ret += '\\n';\n    }\n  }\n\n  return template.replace('{txt}', ret);\n}\n\n;\n\nfunction processSRV(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tSRV\\t' + record.priority + '\\t';\n      ret += record.weight + '\\t';\n      ret += record.port + '\\t';\n      ret += record.target + '\\n';\n    }\n  }\n\n  return template.replace('{srv}', ret);\n}\n\n;\n\nfunction processSPF(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tSPF\\t' + record.data + '\\n';\n    }\n  }\n\n  return template.replace('{spf}', ret);\n}\n\n;\n\nfunction processURI(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tURI\\t' + record.priority + '\\t';\n      ret += record.weight + '\\t';\n      ret += '\"' + record.target + '\"\\n';\n    }\n  }\n\n  return template.replace('{uri}', ret);\n}\n\n;\n\nfunction processValues(jsonZoneFile, template) {\n  template = template.replace('{zone}', jsonZoneFile['$origin'] || (jsonZoneFile['soa'] ? jsonZoneFile['soa']['name'] : false) || '');\n  template = template.replace('{datetime}', new Date().toISOString());\n  const time = Math.round(Date.now() / 1000);\n  return template.replace('{time}', \"\".concat(time));\n}\n\n;","map":null,"metadata":{},"sourceType":"script"}