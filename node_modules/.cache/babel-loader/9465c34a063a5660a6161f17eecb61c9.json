{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst errors_1 = require(\"./errors\");\n/**\n* @ignore\n*/\n\n\nfunction makeDIDFromAddress(address) {\n  return \"did:btc-addr:\".concat(address);\n}\n\nexports.makeDIDFromAddress = makeDIDFromAddress;\n/**\n* @ignore\n*/\n\nfunction makeDIDFromPublicKey(publicKey) {\n  return \"did:ecdsa-pub:\".concat(publicKey);\n}\n\nexports.makeDIDFromPublicKey = makeDIDFromPublicKey;\n/**\n* @ignore\n*/\n\nfunction getDIDType(decentralizedID) {\n  const didParts = decentralizedID.split(':');\n\n  if (didParts.length !== 3) {\n    throw new errors_1.InvalidDIDError('Decentralized IDs must have 3 parts');\n  }\n\n  if (didParts[0].toLowerCase() !== 'did') {\n    throw new errors_1.InvalidDIDError('Decentralized IDs must start with \"did\"');\n  }\n\n  return didParts[1].toLowerCase();\n}\n\nexports.getDIDType = getDIDType;\n/**\n* @ignore\n*/\n\nfunction getAddressFromDID(decentralizedID) {\n  const didType = getDIDType(decentralizedID);\n\n  if (didType === 'btc-addr') {\n    return decentralizedID.split(':')[2];\n  } else {\n    return null;\n  }\n}\n\nexports.getAddressFromDID = getAddressFromDID;\n/*\nexport function getPublicKeyOrAddressFromDID(decentralizedID) {\n  const didParts = decentralizedID.split(':')\n\n  if (didParts.length !== 3) {\n    throw new InvalidDIDError('Decentralized IDs must have 3 parts')\n  }\n\n  if (didParts[0].toLowerCase() !== 'did') {\n    throw new InvalidDIDError('Decentralized IDs must start with \"did\"')\n  }\n\n  if (didParts[1].toLowerCase() === 'ecdsa-pub') {\n    return didParts[2]\n  } else if (didParts[1].toLowerCase() === 'btc-addr') {\n    return didParts[2]\n  } else {\n    throw new InvalidDIDError('Decentralized ID format not supported')\n  }\n}\n*/","map":null,"metadata":{},"sourceType":"script"}