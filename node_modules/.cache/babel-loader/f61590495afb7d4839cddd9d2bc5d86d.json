{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst cheerio = require(\"cheerio\");\n\nconst service_1 = require(\"./service\");\n\nclass Facebook extends service_1.Service {\n  static getProofUrl(proof) {\n    return this.normalizeUrl(proof);\n  }\n\n  static normalizeUrl(proof) {\n    let proofUrl = proof.proof_url.toLowerCase();\n    const urlRegex = /(?:http[s]*:\\/\\/){0,1}(?:[a-zA-Z0-9-]+\\.)+facebook\\.com/;\n    proofUrl = super.prefixScheme(proofUrl);\n\n    if (proofUrl.startsWith('https://facebook.com')) {\n      let tokens = proofUrl.split('https://facebook.com');\n      proofUrl = \"https://www.facebook.com\".concat(tokens[1]);\n      tokens = proofUrl.split('https://www.facebook.com/')[1].split('/posts/');\n      const postId = tokens[1];\n      proofUrl = \"https://www.facebook.com/\".concat(proof.identifier, \"/posts/\").concat(postId);\n    } else if (proofUrl.match(urlRegex)) {\n      const tokens = proofUrl.split('facebook.com/')[1].split('/posts/');\n      const postId = tokens[1];\n      proofUrl = \"https://www.facebook.com/\".concat(proof.identifier, \"/posts/\").concat(postId);\n    } else {\n      throw new Error(\"Proof url \".concat(proof.proof_url, \" is not valid for service \").concat(proof.service));\n    }\n\n    return proofUrl;\n  }\n\n  static getProofStatement(searchText) {\n    const $ = cheerio.load(searchText);\n    const statement = $('meta[name=\"description\"]').attr('content');\n    return statement !== undefined ? statement.trim() : '';\n  }\n\n}\n\nexports.Facebook = Facebook;","map":null,"metadata":{},"sourceType":"script"}