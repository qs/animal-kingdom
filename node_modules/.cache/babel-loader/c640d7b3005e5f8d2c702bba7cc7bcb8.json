{"ast":null,"code":"// Generated by IcedCoffeeScript 108.0.8\n(function () {\n  var G,\n      Global,\n      Hasher,\n      RIPEMD160,\n      WordArray,\n      X64Word,\n      X64WordArray,\n      f1,\n      f2,\n      f3,\n      f4,\n      f5,\n      rotl,\n      transform,\n      _ref,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function (child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  _ref = require('./wordarray'), WordArray = _ref.WordArray, X64Word = _ref.X64Word, X64WordArray = _ref.X64WordArray;\n  Hasher = require('./algbase').Hasher;\n\n  Global = function () {\n    function Global() {\n      this._zl = new WordArray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);\n      this._zr = new WordArray([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);\n      this._sl = new WordArray([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);\n      this._sr = new WordArray([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);\n      this._hl = new WordArray([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);\n      this._hr = new WordArray([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);\n    }\n\n    return Global;\n  }();\n\n  G = new Global();\n\n  RIPEMD160 = function (_super) {\n    __extends(RIPEMD160, _super);\n\n    function RIPEMD160() {\n      return RIPEMD160.__super__.constructor.apply(this, arguments);\n    }\n\n    RIPEMD160.blockSize = 512 / 32;\n    RIPEMD160.prototype.blockSize = RIPEMD160.blockSize;\n    RIPEMD160.output_size = 160 / 8;\n    RIPEMD160.prototype.output_size = RIPEMD160.output_size;\n\n    RIPEMD160.prototype._doReset = function () {\n      return this._hash = new WordArray([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);\n    };\n\n    RIPEMD160.prototype.get_output_size = function () {\n      return this.output_size;\n    };\n\n    RIPEMD160.prototype._doProcessBlock = function (M, offset) {\n      var H, M_offset_i, al, ar, bl, br, cl, cr, dl, dr, el, er, hl, hr, i, offset_i, sl, sr, t, zl, zr, _i, _j;\n\n      for (i = _i = 0; _i < 16; i = ++_i) {\n        offset_i = offset + i;\n        M_offset_i = M[offset_i];\n        M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;\n      }\n\n      H = this._hash.words;\n      hl = G._hl.words;\n      hr = G._hr.words;\n      zl = G._zl.words;\n      zr = G._zr.words;\n      sl = G._sl.words;\n      sr = G._sr.words;\n      ar = al = H[0];\n      br = bl = H[1];\n      cr = cl = H[2];\n      dr = dl = H[3];\n      er = el = H[4];\n\n      for (i = _j = 0; _j < 80; i = ++_j) {\n        t = al + M[offset + zl[i]] | 0;\n\n        if (i < 16) {\n          t += f1(bl, cl, dl) + hl[0];\n        } else if (i < 32) {\n          t += f2(bl, cl, dl) + hl[1];\n        } else if (i < 48) {\n          t += f3(bl, cl, dl) + hl[2];\n        } else if (i < 64) {\n          t += f4(bl, cl, dl) + hl[3];\n        } else {\n          t += f5(bl, cl, dl) + hl[4];\n        }\n\n        t = t | 0;\n        t = rotl(t, sl[i]);\n        t = t + el | 0;\n        al = el;\n        el = dl;\n        dl = rotl(cl, 10);\n        cl = bl;\n        bl = t;\n        t = ar + M[offset + zr[i]] | 0;\n\n        if (i < 16) {\n          t += f5(br, cr, dr) + hr[0];\n        } else if (i < 32) {\n          t += f4(br, cr, dr) + hr[1];\n        } else if (i < 48) {\n          t += f3(br, cr, dr) + hr[2];\n        } else if (i < 64) {\n          t += f2(br, cr, dr) + hr[3];\n        } else {\n          t += f1(br, cr, dr) + hr[4];\n        }\n\n        t = t | 0;\n        t = rotl(t, sr[i]);\n        t = t + er | 0;\n        ar = er;\n        er = dr;\n        dr = rotl(cr, 10);\n        cr = br;\n        br = t;\n      }\n\n      t = H[1] + cl + dr | 0;\n      H[1] = H[2] + dl + er | 0;\n      H[2] = H[3] + el + ar | 0;\n      H[3] = H[4] + al + br | 0;\n      H[4] = H[0] + bl + cr | 0;\n      return H[0] = t;\n    };\n\n    RIPEMD160.prototype._doFinalize = function () {\n      var H, H_i, data, dataWords, hash, i, nBitsLeft, nBitsTotal, _i;\n\n      data = this._data;\n      dataWords = data.words;\n      nBitsTotal = this._nDataBytes * 8;\n      nBitsLeft = data.sigBytes * 8;\n      dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n      dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff | (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;\n      data.sigBytes = (dataWords.length + 1) * 4;\n\n      this._process();\n\n      hash = this._hash;\n      H = hash.words;\n\n      for (i = _i = 0; _i < 5; i = ++_i) {\n        H_i = H[i];\n        H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;\n      }\n\n      return hash;\n    };\n\n    RIPEMD160.prototype.scrub = function () {\n      return this._hash.scrub();\n    };\n\n    RIPEMD160.prototype.copy_to = function (obj) {\n      RIPEMD160.__super__.copy_to.call(this, obj);\n\n      return obj._hash = this._hash.clone();\n    };\n\n    RIPEMD160.prototype.clone = function () {\n      var out;\n      out = new RIPEMD160();\n      this.copy_to(out);\n      return out;\n    };\n\n    return RIPEMD160;\n  }(Hasher);\n\n  f1 = function (x, y, z) {\n    return x ^ y ^ z;\n  };\n\n  f2 = function (x, y, z) {\n    return x & y | ~x & z;\n  };\n\n  f3 = function (x, y, z) {\n    return (x | ~y) ^ z;\n  };\n\n  f4 = function (x, y, z) {\n    return x & z | y & ~z;\n  };\n\n  f5 = function (x, y, z) {\n    return x ^ (y | ~z);\n  };\n\n  rotl = function (x, n) {\n    return x << n | x >>> 32 - n;\n  };\n\n  transform = function (x) {\n    var out;\n    out = new RIPEMD160().finalize(x);\n    x.scrub();\n    return out;\n  };\n\n  exports.RIPEMD160 = RIPEMD160;\n  exports.transform = transform;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}