{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst convert = require('../converter');\n\nconst tools_1 = require('../converter/tools');\n\nfunction psbtToBuffer({\n  globalMap,\n  inputs,\n  outputs\n}) {\n  const _psbtToKeyVals = psbtToKeyVals({\n    globalMap,\n    inputs,\n    outputs\n  }),\n        globalKeyVals = _psbtToKeyVals.globalKeyVals,\n        inputKeyVals = _psbtToKeyVals.inputKeyVals,\n        outputKeyVals = _psbtToKeyVals.outputKeyVals;\n\n  const globalBuffer = tools_1.keyValsToBuffer(globalKeyVals);\n\n  const keyValsOrEmptyToBuffer = keyVals => keyVals.length === 0 ? [Buffer.from([0])] : keyVals.map(tools_1.keyValsToBuffer);\n\n  const inputBuffers = keyValsOrEmptyToBuffer(inputKeyVals);\n  const outputBuffers = keyValsOrEmptyToBuffer(outputKeyVals);\n  const header = Buffer.allocUnsafe(5);\n  header.writeUIntBE(0x70736274ff, 0, 5);\n  return Buffer.concat([header, globalBuffer].concat(inputBuffers, outputBuffers));\n}\n\nexports.psbtToBuffer = psbtToBuffer;\n\nconst sortKeyVals = (a, b) => {\n  return a.key.compare(b.key);\n};\n\nfunction keyValsFromMap(keyValMap, converterFactory) {\n  const keyHexSet = new Set();\n  const keyVals = Object.entries(keyValMap).reduce((result, [key, value]) => {\n    if (key === 'unknownKeyVals') return result; // We are checking for undefined anyways. So ignore TS error\n    // @ts-ignore\n\n    const converter = converterFactory[key];\n    if (converter === undefined) return result;\n    const encodedKeyVals = (Array.isArray(value) ? value : [value]).map(converter.encode);\n    const keyHexes = encodedKeyVals.map(kv => kv.key.toString('hex'));\n    keyHexes.forEach(hex => {\n      if (keyHexSet.has(hex)) throw new Error('Serialize Error: Duplicate key: ' + hex);\n      keyHexSet.add(hex);\n    });\n    return result.concat(encodedKeyVals);\n  }, []); // Get other keyVals that have not yet been gotten\n\n  const otherKeyVals = keyValMap.unknownKeyVals ? keyValMap.unknownKeyVals.filter(keyVal => {\n    return !keyHexSet.has(keyVal.key.toString('hex'));\n  }) : [];\n  return keyVals.concat(otherKeyVals).sort(sortKeyVals);\n}\n\nfunction psbtToKeyVals({\n  globalMap,\n  inputs,\n  outputs\n}) {\n  // First parse the global keyVals\n  // Get any extra keyvals to pass along\n  return {\n    globalKeyVals: keyValsFromMap(globalMap, convert.globals),\n    inputKeyVals: inputs.map(i => keyValsFromMap(i, convert.inputs)),\n    outputKeyVals: outputs.map(o => keyValsFromMap(o, convert.outputs))\n  };\n}\n\nexports.psbtToKeyVals = psbtToKeyVals;","map":null,"metadata":{},"sourceType":"script"}