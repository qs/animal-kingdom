{"ast":null,"code":"import { ME_FILENAME, SUBJECTS_FILENAME } from './constants';\nexport function jsonCopy(object) {\n  return JSON.parse(JSON.stringify(object));\n}\n/**\n * Return a JSON object with the username\n * and domain of the kingdom\n *\n * Accepts URLs of the format:\n * https://example.com/kingdom/username.id\n * @param  {string} url\n * @return {Object} an Object with keys `app` and `username`\n */\n\nexport function subjectFromKingdomUrl(url) {\n  const tokens = url.split('/kingdom');\n  const app = tokens[0];\n  const username = tokens[1].split('/')[1];\n  return {\n    app,\n    username\n  };\n}\nexport function resolveSubjects(component, userSession, subjects) {\n  subjects.map((subject, index) => {\n    const options = {\n      decrypt: false,\n      app: subject.app,\n      username: subject.username\n    };\n    return userSession.getFile(ME_FILENAME, options) // fetch me.json for each subject\n    .then(content => {\n      if (!content) {\n        subjects[index] = Object.assign({}, subject, {\n          missing: true\n        });\n        component.setState({\n          subjects\n        });\n        return subjects;\n      } else {\n        subjects[index] = Object.assign({}, subject, {\n          missing: false\n        }, JSON.parse(content));\n        component.setState({\n          subjects\n        });\n        return subjects;\n      }\n    });\n  });\n}\nexport function loadRuler(userSession, username, app) {\n  const options = {\n    decrypt: false,\n    username,\n    app\n  };\n  return userSession.getFile(ME_FILENAME, options).then(content => {\n    if (content) {\n      const ruler = JSON.parse(content);\n      return ruler;\n    } else {\n      const ruler = null;\n      return ruler;\n    }\n  });\n}\nexport function loadSubjects(userSession, username, app) {\n  const options = {\n    decrypt: false,\n    username,\n    app\n  };\n  return userSession.getFile(SUBJECTS_FILENAME, options).then(content => {\n    if (content) {\n      const subjects = JSON.parse(content);\n      return subjects;\n    } else {\n      return [];\n    }\n  });\n}","map":{"version":3,"sources":["/home/ivan/Projects/hacksupply/animal-kingdom-master/src/utils.js"],"names":["ME_FILENAME","SUBJECTS_FILENAME","jsonCopy","object","JSON","parse","stringify","subjectFromKingdomUrl","url","tokens","split","app","username","resolveSubjects","component","userSession","subjects","map","subject","index","options","decrypt","getFile","then","content","Object","assign","missing","setState","loadRuler","ruler","loadSubjects"],"mappings":"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","sourcesContent":["import { ME_FILENAME, SUBJECTS_FILENAME } from './constants'\n\nexport function jsonCopy(object) {\n  return JSON.parse(JSON.stringify(object))\n}\n\n\n/**\n * Return a JSON object with the username\n * and domain of the kingdom\n *\n * Accepts URLs of the format:\n * https://example.com/kingdom/username.id\n * @param  {string} url\n * @return {Object} an Object with keys `app` and `username`\n */\nexport function subjectFromKingdomUrl(url) {\n  const tokens = url.split('/kingdom')\n  const app = tokens[0]\n  const username = tokens[1].split('/')[1]\n  return {\n    app,\n    username\n  }\n}\n\nexport function resolveSubjects(component, userSession, subjects) {\n  subjects.map((subject, index) => {\n    const options = {\n      decrypt: false,\n      app: subject.app,\n      username: subject.username\n    }\n    return userSession.getFile(ME_FILENAME, options) // fetch me.json for each subject\n    .then(content => {\n      if(!content) {\n\n        subjects[index] = Object.assign({}, subject, { missing: true })\n        component.setState({ subjects })\n        return subjects\n      } else {\n        subjects[index] = Object.assign({}, subject, { missing: false }, JSON.parse(content))\n        component.setState({ subjects })\n        return subjects\n      }\n\n    })\n  })\n}\n\nexport function loadRuler(userSession, username, app) {\n  const options = { decrypt: false, username, app }\n  return userSession.getFile(ME_FILENAME, options)\n  .then((content) => {\n    if(content) {\n      const ruler = JSON.parse(content)\n      return ruler\n    } else {\n      const ruler = null\n      return ruler\n    }\n  })\n}\n\nexport function loadSubjects(userSession, username, app) {\n  const options = { decrypt: false, username, app }\n  return userSession.getFile(SUBJECTS_FILENAME, options)\n  .then((content) => {\n    if(content) {\n      const subjects = JSON.parse(content)\n      return subjects\n    } else {\n      return []\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}