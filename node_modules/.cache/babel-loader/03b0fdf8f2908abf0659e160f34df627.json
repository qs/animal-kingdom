{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n* @ignore\n*/\n\nexports.ERROR_CODES = {\n  MISSING_PARAMETER: 'missing_parameter',\n  REMOTE_SERVICE_ERROR: 'remote_service_error',\n  INVALID_STATE: 'invalid_state',\n  NO_SESSION_DATA: 'no_session_data',\n  UNKNOWN: 'unknown'\n};\nObject.freeze(exports.ERROR_CODES);\n/**\n* @ignore\n*/\n\nclass BlockstackError extends Error {\n  constructor(error) {\n    super(error.message);\n    this.message = error.message;\n    this.code = error.code;\n    this.parameter = error.parameter ? error.parameter : null;\n  }\n\n  toString() {\n    return \"\".concat(super.toString(), \"\\n    code: \").concat(this.code, \" param: \").concat(this.parameter ? this.parameter : 'n/a');\n  }\n\n}\n\nexports.BlockstackError = BlockstackError;\n/**\n* @ignore\n*/\n\nclass FileNotFound extends BlockstackError {\n  constructor(message) {\n    super({\n      message,\n      code: 'file_not_found'\n    });\n    this.name = 'FileNotFound';\n  }\n\n}\n\nexports.FileNotFound = FileNotFound;\n/**\n* @ignore\n*/\n\nclass InvalidParameterError extends BlockstackError {\n  constructor(parameter, message = '') {\n    super({\n      code: 'missing_parameter',\n      message,\n      parameter: ''\n    });\n    this.name = 'MissingParametersError';\n  }\n\n}\n\nexports.InvalidParameterError = InvalidParameterError;\n/**\n* @ignore\n*/\n\nclass MissingParameterError extends BlockstackError {\n  constructor(parameter, message = '') {\n    super({\n      code: exports.ERROR_CODES.MISSING_PARAMETER,\n      message,\n      parameter\n    });\n    this.name = 'MissingParametersError';\n  }\n\n}\n\nexports.MissingParameterError = MissingParameterError;\n/**\n* @ignore\n*/\n\nclass RemoteServiceError extends BlockstackError {\n  constructor(response, message = '') {\n    super({\n      code: exports.ERROR_CODES.REMOTE_SERVICE_ERROR,\n      message\n    });\n    this.response = response;\n  }\n\n}\n\nexports.RemoteServiceError = RemoteServiceError;\n/**\n* @ignore\n*/\n\nclass InvalidDIDError extends BlockstackError {\n  constructor(message = '') {\n    super({\n      code: 'invalid_did_error',\n      message\n    });\n    this.name = 'InvalidDIDError';\n  }\n\n}\n\nexports.InvalidDIDError = InvalidDIDError;\n/**\n* @ignore\n*/\n\nclass NotEnoughFundsError extends BlockstackError {\n  constructor(leftToFund) {\n    const message = \"Not enough UTXOs to fund. Left to fund: \".concat(leftToFund);\n    super({\n      code: 'not_enough_error',\n      message\n    });\n    this.leftToFund = leftToFund;\n    this.name = 'NotEnoughFundsError';\n    this.message = message;\n  }\n\n}\n\nexports.NotEnoughFundsError = NotEnoughFundsError;\n/**\n* @ignore\n*/\n\nclass InvalidAmountError extends BlockstackError {\n  constructor(fees, specifiedAmount) {\n    const message = \"Not enough coin to fund fees transaction fees. Fees would be \".concat(fees, \",\") + \" specified spend is  \".concat(specifiedAmount);\n    super({\n      code: 'invalid_amount_error',\n      message\n    });\n    this.specifiedAmount = specifiedAmount;\n    this.fees = fees;\n    this.name = 'InvalidAmountError';\n    this.message = message;\n  }\n\n}\n\nexports.InvalidAmountError = InvalidAmountError;\n/**\n* @ignore\n*/\n\nclass LoginFailedError extends BlockstackError {\n  constructor(reason) {\n    const message = \"Failed to login: \".concat(reason);\n    super({\n      code: 'login_failed',\n      message\n    });\n    this.message = message;\n    this.name = 'LoginFailedError';\n  }\n\n}\n\nexports.LoginFailedError = LoginFailedError;\n/**\n* @ignore\n*/\n\nclass SignatureVerificationError extends BlockstackError {\n  constructor(reason) {\n    const message = \"Failed to verify signature: \".concat(reason);\n    super({\n      code: 'signature_verification_failure',\n      message\n    });\n    this.message = message;\n    this.name = 'SignatureVerificationError';\n  }\n\n}\n\nexports.SignatureVerificationError = SignatureVerificationError;\n/**\n* @ignore\n*/\n\nclass InvalidStateError extends BlockstackError {\n  constructor(message) {\n    super({\n      code: exports.ERROR_CODES.INVALID_STATE,\n      message\n    });\n    this.message = message;\n    this.name = 'InvalidStateError';\n  }\n\n}\n\nexports.InvalidStateError = InvalidStateError;\n/**\n* @ignore\n*/\n\nclass NoSessionDataError extends BlockstackError {\n  constructor(message) {\n    super({\n      code: exports.ERROR_CODES.INVALID_STATE,\n      message\n    });\n    this.message = message;\n    this.name = 'NoSessionDataError';\n  }\n\n}\n\nexports.NoSessionDataError = NoSessionDataError;","map":null,"metadata":{},"sourceType":"script"}