{"ast":null,"code":"// Generated by IcedCoffeeScript 108.0.8\n(function () {\n  var Cipher,\n      Counter,\n      StreamCipher,\n      WordArray,\n      bulk_encrypt,\n      encrypt,\n      iced,\n      __iced_k,\n      __iced_k_noop,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function (child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  iced = require('iced-runtime');\n\n  __iced_k = __iced_k_noop = function () {};\n\n  WordArray = require('./wordarray').WordArray;\n  StreamCipher = require('./algbase').StreamCipher;\n\n  Counter = function () {\n    Counter.prototype.WORD_MAX = 0xffffffff;\n\n    function Counter(_arg) {\n      var i, len, value;\n      value = _arg.value, len = _arg.len;\n      this._value = value != null ? value.clone() : (len == null ? len = 2 : void 0, new WordArray(function () {\n        var _i, _results;\n\n        _results = [];\n\n        for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {\n          _results.push(0);\n        }\n\n        return _results;\n      }()));\n    }\n\n    Counter.prototype.inc = function () {\n      var go, i;\n      go = true;\n      i = this._value.words.length - 1;\n\n      while (go && i >= 0) {\n        if (++this._value.words[i] > Counter.WORD_MAX) {\n          this._value.words[i] = 0;\n        } else {\n          go = false;\n        }\n\n        i--;\n      }\n\n      return this;\n    };\n\n    Counter.prototype.inc_le = function () {\n      var go, i;\n      go = true;\n      i = 0;\n\n      while (go && i < this._value.words.length) {\n        if (++this._value.words[i] > Counter.WORD_MAX) {\n          this._value.words[i] = 0;\n        } else {\n          go = false;\n        }\n\n        i++;\n      }\n\n      return this;\n    };\n\n    Counter.prototype.get = function () {\n      return this._value;\n    };\n\n    Counter.prototype.copy = function () {\n      return this._value.clone();\n    };\n\n    return Counter;\n  }();\n\n  Cipher = function (_super) {\n    __extends(Cipher, _super);\n\n    function Cipher(_arg) {\n      this.block_cipher = _arg.block_cipher, this.iv = _arg.iv;\n\n      Cipher.__super__.constructor.call(this);\n\n      this.bsiw = this.block_cipher.blockSize / 4;\n\n      if (!(this.iv.sigBytes === this.block_cipher.blockSize)) {\n        throw new Error(\"IV is wrong length (\" + this.iv.sigBytes + \")\");\n      }\n\n      this.ctr = new Counter({\n        value: this.iv\n      });\n    }\n\n    Cipher.prototype.scrub = function () {\n      return this.block_cipher.scrub();\n    };\n\n    Cipher.prototype.get_pad = function () {\n      var pad;\n      pad = this.ctr.copy();\n      this.ctr.inc();\n      this.block_cipher.encryptBlock(pad.words);\n      return pad;\n    };\n\n    return Cipher;\n  }(StreamCipher);\n\n  encrypt = function (_arg) {\n    var block_cipher, cipher, input, iv, ret;\n    block_cipher = _arg.block_cipher, iv = _arg.iv, input = _arg.input;\n    cipher = new Cipher({\n      block_cipher: block_cipher,\n      iv: iv\n    });\n    ret = cipher.encrypt(input);\n    cipher.scrub();\n    return ret;\n  };\n\n  bulk_encrypt = function (_arg, cb) {\n    var block_cipher, cipher, input, iv, progress_hook, ret, what, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n    __iced_k = __iced_k_noop;\n    ___iced_passed_deferral = iced.findDeferral(arguments);\n    block_cipher = _arg.block_cipher, iv = _arg.iv, input = _arg.input, progress_hook = _arg.progress_hook, what = _arg.what;\n    cipher = new Cipher({\n      block_cipher: block_cipher,\n      iv: iv\n    });\n    (function (_this) {\n      return function (__iced_k) {\n        __iced_deferrals = new iced.Deferrals(__iced_k, {\n          parent: ___iced_passed_deferral,\n          filename: \"/Users/max/src/keybase/triplesec/src/ctr.iced\"\n        });\n        cipher.bulk_encrypt({\n          input: input,\n          progress_hook: progress_hook,\n          what: what\n        }, __iced_deferrals.defer({\n          assign_fn: function () {\n            return function () {\n              return ret = arguments[0];\n            };\n          }(),\n          lineno: 121\n        }));\n\n        __iced_deferrals._fulfill();\n      };\n    })(this)(function (_this) {\n      return function () {\n        return cb(ret);\n      };\n    }(this));\n  };\n\n  exports.Counter = Counter;\n  exports.Cipher = Cipher;\n  exports.encrypt = encrypt;\n  exports.bulk_encrypt = bulk_encrypt;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}