{"ast":null,"code":"// Generated by IcedCoffeeScript 108.0.11\n(function () {\n  var Lock,\n      NamedLock,\n      SingleFlightTable,\n      SingleFlighter,\n      Table,\n      iced,\n      __iced_k,\n      __iced_k_noop,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function (child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  iced = require('iced-runtime');\n\n  __iced_k = __iced_k_noop = function () {};\n\n  exports.Lock = Lock = function () {\n    function Lock() {\n      this._open = true;\n      this._waiters = [];\n    }\n\n    Lock.prototype.acquire = function (cb) {\n      if (this._open) {\n        this._open = false;\n        return cb();\n      } else {\n        return this._waiters.push(cb);\n      }\n    };\n\n    Lock.prototype.release = function () {\n      var w;\n\n      if (this._waiters.length) {\n        w = this._waiters.shift();\n        return w();\n      } else {\n        return this._open = true;\n      }\n    };\n\n    Lock.prototype.open = function () {\n      return this._open;\n    };\n\n    return Lock;\n  }();\n\n  NamedLock = function (_super) {\n    __extends(NamedLock, _super);\n\n    function NamedLock(tab, name) {\n      this.tab = tab;\n      this.name = name;\n\n      NamedLock.__super__.constructor.call(this);\n\n      this.refs = 0;\n    }\n\n    NamedLock.prototype.incref = function () {\n      return ++this.refs;\n    };\n\n    NamedLock.prototype.decref = function () {\n      return --this.refs;\n    };\n\n    NamedLock.prototype.release = function () {\n      NamedLock.__super__.release.call(this);\n\n      if (this.decref() === 0) {\n        return delete this.tab.locks[this.name];\n      }\n    };\n\n    return NamedLock;\n  }(Lock);\n\n  exports.Table = Table = function () {\n    function Table() {\n      this.locks = {};\n    }\n\n    Table.prototype.create = function (name) {\n      var l;\n      l = new NamedLock(this, name);\n      return this.locks[name] = l;\n    };\n\n    Table.prototype.acquire = function (name, cb, wait) {\n      var l, was_open, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      l = this.locks[name] || this.create(name);\n      was_open = l._open;\n      l.incref();\n      (function (_this) {\n        return function (__iced_k) {\n          if (wait || l._open) {\n            (function (__iced_k) {\n              __iced_deferrals = new iced.Deferrals(__iced_k, {\n                parent: ___iced_passed_deferral,\n                filename: \"/Users/max/src/iced/iced-lock/index.iced\",\n                funcname: \"Table.acquire\"\n              });\n              l.acquire(__iced_deferrals.defer({\n                lineno: 69\n              }));\n\n              __iced_deferrals._fulfill();\n            })(__iced_k);\n          } else {\n            return __iced_k(l = null);\n          }\n        };\n      })(this)(function (_this) {\n        return function () {\n          return cb(l, was_open);\n        };\n      }(this));\n    };\n\n    Table.prototype.lookup = function (name) {\n      return this.locks[name];\n    };\n\n    return Table;\n  }();\n\n  SingleFlighter = function () {\n    function SingleFlighter(_arg) {\n      this.table = _arg.table, this.key = _arg.key;\n      this.seqid = null;\n      this.waiter = null;\n      this.open = true;\n      this.refs = 0;\n    }\n\n    SingleFlighter.prototype._incref = function () {\n      return ++this.refs;\n    };\n\n    SingleFlighter.prototype._decref = function () {\n      if (--this.refs === 0) {\n        return this.table._remove({\n          key: this.key\n        });\n      }\n    };\n\n    SingleFlighter.prototype._enter = function (_arg, cb) {\n      var seqid, tmp;\n      seqid = _arg.seqid;\n\n      if (this.open) {\n        this.open = false;\n        this.seqid = seqid;\n        return cb(null, this);\n      } else if (this.waiter != null) {\n        if (seqid > this.waiter.seqid) {\n          tmp = this.waiter;\n          this.waiter = {\n            cb: cb,\n            seqid: seqid\n          };\n          tmp.cb(new Error(\"our seqid=\" + tmp.seqid + \" was preempted by \" + seqid));\n        } else {\n          cb(new Error(\"our seqid=\" + seqid + \" is too stale (since \" + this.waiter.seqid + \" is ahead of us)\"));\n        }\n\n        return this._decref();\n      } else if (seqid > this.seqid) {\n        return this.waiter = {\n          seqid: seqid,\n          cb: cb\n        };\n      } else {\n        cb(new Error(\"our seqid=\" + seqid + \" is too stale (since \" + this.seqid + \" is already in flight)\"));\n        return this._decref();\n      }\n    };\n\n    SingleFlighter.prototype.release = function () {\n      var cb, _ref;\n\n      if (this.waiter != null) {\n        _ref = this.waiter, this.seqid = _ref.seqid, cb = _ref.cb;\n        this.waiter = null;\n        cb(null, this);\n      } else {\n        this.open = true;\n        this.seqid = null;\n      }\n\n      return this._decref();\n    };\n\n    return SingleFlighter;\n  }();\n\n  exports.SingleFlightTable = SingleFlightTable = function () {\n    function SingleFlightTable() {\n      this._jobs = {};\n    }\n\n    SingleFlightTable.prototype._create = function (_arg) {\n      var key;\n      key = _arg.key;\n      return this._jobs[key] = new SingleFlighter({\n        table: this,\n        key: key\n      });\n    };\n\n    SingleFlightTable.prototype._remove = function (_arg) {\n      var key;\n      key = _arg.key;\n      return delete this._jobs[key];\n    };\n\n    SingleFlightTable.prototype.enter = function (_arg, cb) {\n      var key, s, seqid;\n      seqid = _arg.seqid, key = _arg.key;\n      s = this._jobs[key] || this._create({\n        key: key\n      });\n\n      s._incref();\n\n      return s._enter({\n        seqid: seqid\n      }, cb);\n    };\n\n    return SingleFlightTable;\n  }();\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}