{"ast":null,"code":"// Generated by IcedCoffeeScript 108.0.8\n(function () {\n  var HMAC, PBKDF2, WordArray, iced, pbkdf2, util, __iced_k, __iced_k_noop;\n\n  iced = require('iced-runtime');\n\n  __iced_k = __iced_k_noop = function () {};\n\n  HMAC = require('./hmac').HMAC;\n  WordArray = require('./wordarray').WordArray;\n  util = require('./util');\n\n  PBKDF2 = function () {\n    function PBKDF2(_arg) {\n      this.klass = _arg.klass, this.c = _arg.c;\n      this.c || (this.c = 1024);\n      this.klass || (this.klass = HMAC);\n    }\n\n    PBKDF2.prototype._PRF = function (input) {\n      this.prf.reset();\n      return this.prf.finalize(input);\n    };\n\n    PBKDF2.prototype._gen_T_i = function (_arg, cb) {\n      var U, i, progress_hook, ret, salt, seed, stop, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      salt = _arg.salt, i = _arg.i, progress_hook = _arg.progress_hook;\n      progress_hook(0);\n      seed = salt.clone().concat(new WordArray([i]));\n      U = this._PRF(seed);\n      ret = U.clone();\n      i = 1;\n      (function (_this) {\n        return function (__iced_k) {\n          var _while;\n\n          _while = function (__iced_k) {\n            var _break, _continue, _next;\n\n            _break = __iced_k;\n\n            _continue = function () {\n              return iced.trampoline(function () {\n                return _while(__iced_k);\n              });\n            };\n\n            _next = _continue;\n\n            if (!(i < _this.c)) {\n              return _break();\n            } else {\n              stop = Math.min(_this.c, i + 128);\n\n              while (i < stop) {\n                U = _this._PRF(U);\n                ret.xor(U, {});\n                i++;\n              }\n\n              progress_hook(i);\n\n              (function (__iced_k) {\n                __iced_deferrals = new iced.Deferrals(__iced_k, {\n                  parent: ___iced_passed_deferral,\n                  filename: \"/Users/max/src/keybase/triplesec/src/pbkdf2.iced\",\n                  funcname: \"PBKDF2._gen_T_i\"\n                });\n                util.default_delay(0, 0, __iced_deferrals.defer({\n                  lineno: 57\n                }));\n\n                __iced_deferrals._fulfill();\n              })(function () {\n                return _next(null);\n              });\n            }\n          };\n\n          _while(__iced_k);\n        };\n      })(this)(function (_this) {\n        return function () {\n          progress_hook(i);\n          return cb(ret);\n        };\n      }(this));\n    };\n\n    PBKDF2.prototype.run = function (_arg, cb) {\n      var bs, dkLen, flat, i, key, n, ph, progress_hook, salt, tmp, tph, words, ___iced_passed_deferral, __iced_deferrals, __iced_k, _begin, _end, _positive;\n\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      key = _arg.key, salt = _arg.salt, dkLen = _arg.dkLen, progress_hook = _arg.progress_hook;\n      this.prf = new this.klass(key);\n      bs = this.prf.get_output_size();\n      n = Math.ceil(dkLen / bs);\n      words = [];\n      tph = null;\n\n      ph = function (_this) {\n        return function (block) {\n          return function (iter) {\n            return typeof progress_hook === \"function\" ? progress_hook({\n              what: \"pbkdf2\",\n              total: n * _this.c,\n              i: block * _this.c + iter\n            }) : void 0;\n          };\n        };\n      }(this);\n\n      ph(0)(0);\n      (function (_this) {\n        return function (__iced_k) {\n          var _i, _results, _while;\n\n          i = 1;\n          _begin = 1;\n          _end = n;\n          _positive = _end > _begin;\n\n          _while = function (__iced_k) {\n            var _break, _continue, _next;\n\n            _break = __iced_k;\n\n            _continue = function () {\n              return iced.trampoline(function () {\n                if (_positive) {\n                  i += 1;\n                } else {\n                  i -= 1;\n                }\n\n                return _while(__iced_k);\n              });\n            };\n\n            _next = _continue;\n\n            if (!!(_positive === true && i > n || _positive === false && i < n)) {\n              return _break();\n            } else {\n              (function (__iced_k) {\n                __iced_deferrals = new iced.Deferrals(__iced_k, {\n                  parent: ___iced_passed_deferral,\n                  filename: \"/Users/max/src/keybase/triplesec/src/pbkdf2.iced\",\n                  funcname: \"PBKDF2.run\"\n                });\n\n                _this._gen_T_i({\n                  salt: salt,\n                  i: i,\n                  progress_hook: ph(i - 1)\n                }, __iced_deferrals.defer({\n                  assign_fn: function () {\n                    return function () {\n                      return tmp = arguments[0];\n                    };\n                  }(),\n                  lineno: 80\n                }));\n\n                __iced_deferrals._fulfill();\n              })(function () {\n                return _next(words.push(tmp.words));\n              });\n            }\n          };\n\n          _while(__iced_k);\n        };\n      })(this)(function (_this) {\n        return function () {\n          var _ref;\n\n          ph(n)(0);\n          flat = (_ref = []).concat.apply(_ref, words);\n          key.scrub();\n\n          _this.prf.scrub();\n\n          _this.prf = null;\n          return cb(new WordArray(flat, dkLen));\n        };\n      }(this));\n    };\n\n    return PBKDF2;\n  }();\n\n  pbkdf2 = function (_arg, cb) {\n    var c, dkLen, eng, key, klass, out, progress_hook, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n\n    __iced_k = __iced_k_noop;\n    ___iced_passed_deferral = iced.findDeferral(arguments);\n    key = _arg.key, salt = _arg.salt, klass = _arg.klass, c = _arg.c, dkLen = _arg.dkLen, progress_hook = _arg.progress_hook;\n    eng = new PBKDF2({\n      klass: klass,\n      c: c\n    });\n    (function (_this) {\n      return function (__iced_k) {\n        __iced_deferrals = new iced.Deferrals(__iced_k, {\n          parent: ___iced_passed_deferral,\n          filename: \"/Users/max/src/keybase/triplesec/src/pbkdf2.iced\"\n        });\n        eng.run({\n          key: key,\n          salt: salt,\n          dkLen: dkLen,\n          progress_hook: progress_hook\n        }, __iced_deferrals.defer({\n          assign_fn: function () {\n            return function () {\n              return out = arguments[0];\n            };\n          }(),\n          lineno: 106\n        }));\n\n        __iced_deferrals._fulfill();\n      };\n    })(this)(function (_this) {\n      return function () {\n        return cb(out);\n      };\n    }(this));\n  };\n\n  exports.pbkdf2 = pbkdf2;\n  exports.PBKDF2 = PBKDF2;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}