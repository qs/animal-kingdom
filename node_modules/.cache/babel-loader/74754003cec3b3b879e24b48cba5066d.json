{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n}); // Number.MAX_SAFE_INTEGER\n\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\nfunction checkUInt53(n) {\n  if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0) throw new RangeError('value out of range');\n}\n\nfunction encode(_number, buffer, offset) {\n  checkUInt53(_number);\n  if (!buffer) buffer = Buffer.allocUnsafe(encodingLength(_number));\n  if (!Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance');\n  if (!offset) offset = 0; // 8 bit\n\n  if (_number < 0xfd) {\n    buffer.writeUInt8(_number, offset);\n    Object.assign(encode, {\n      bytes: 1\n    }); // 16 bit\n  } else if (_number <= 0xffff) {\n    buffer.writeUInt8(0xfd, offset);\n    buffer.writeUInt16LE(_number, offset + 1);\n    Object.assign(encode, {\n      bytes: 3\n    }); // 32 bit\n  } else if (_number <= 0xffffffff) {\n    buffer.writeUInt8(0xfe, offset);\n    buffer.writeUInt32LE(_number, offset + 1);\n    Object.assign(encode, {\n      bytes: 5\n    }); // 64 bit\n  } else {\n    buffer.writeUInt8(0xff, offset);\n    buffer.writeUInt32LE(_number >>> 0, offset + 1);\n    buffer.writeUInt32LE(_number / 0x100000000 | 0, offset + 5);\n    Object.assign(encode, {\n      bytes: 9\n    });\n  }\n\n  return buffer;\n}\n\nexports.encode = encode;\n\nfunction decode(buffer, offset) {\n  if (!Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance');\n  if (!offset) offset = 0;\n  const first = buffer.readUInt8(offset); // 8 bit\n\n  if (first < 0xfd) {\n    Object.assign(decode, {\n      bytes: 1\n    });\n    return first; // 16 bit\n  } else if (first === 0xfd) {\n    Object.assign(decode, {\n      bytes: 3\n    });\n    return buffer.readUInt16LE(offset + 1); // 32 bit\n  } else if (first === 0xfe) {\n    Object.assign(decode, {\n      bytes: 5\n    });\n    return buffer.readUInt32LE(offset + 1); // 64 bit\n  } else {\n    Object.assign(decode, {\n      bytes: 9\n    });\n    const lo = buffer.readUInt32LE(offset + 1);\n    const hi = buffer.readUInt32LE(offset + 5);\n\n    const _number = hi * 0x0100000000 + lo;\n\n    checkUInt53(_number);\n    return _number;\n  }\n}\n\nexports.decode = decode;\n\nfunction encodingLength(_number) {\n  checkUInt53(_number);\n  return _number < 0xfd ? 1 : _number <= 0xffff ? 3 : _number <= 0xffffffff ? 5 : 9;\n}\n\nexports.encodingLength = encodingLength;","map":null,"metadata":{},"sourceType":"script"}