{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst appConfig_1 = require(\"./appConfig\");\n\nconst sessionStore_1 = require(\"./sessionStore\");\n\nconst authApp = require(\"./authApp\");\n\nconst authMessages = require(\"./authMessages\");\n\nconst storage = require(\"../storage\");\n\nconst utils_1 = require(\"../utils\");\n\nconst errors_1 = require(\"../errors\");\n\nconst logger_1 = require(\"../logger\");\n\nconst hub_1 = require(\"../storage/hub\");\n\nconst authConstants_1 = require(\"./authConstants\");\n/**\n *\n * Represents an instance of a signed in user for a particular app.\n *\n * A signed in user has access to two major pieces of information\n * about the user, the user's private key for that app and the location\n * of the user's gaia storage bucket for the app.\n *\n * A user can be signed in either directly through the interactive\n * sign in process or by directly providing the app private key.\n *\n\n *\n */\n\n\nclass UserSession {\n  /**\n   * Creates a UserSession object\n   *\n   * @param options\n   */\n  constructor(options) {\n    let runningInBrowser = true;\n\n    if (typeof window === 'undefined' && typeof self === 'undefined') {\n      logger_1.Logger.debug('UserSession: not running in browser');\n      runningInBrowser = false;\n    }\n\n    if (options && options.appConfig) {\n      this.appConfig = options.appConfig;\n    } else if (runningInBrowser) {\n      this.appConfig = new appConfig_1.AppConfig();\n    } else {\n      throw new errors_1.MissingParameterError('You need to specify options.appConfig');\n    }\n\n    if (options && options.sessionStore) {\n      this.store = options.sessionStore;\n    } else if (runningInBrowser) {\n      if (options) {\n        this.store = new sessionStore_1.LocalStorageStore(options.sessionOptions);\n      } else {\n        this.store = new sessionStore_1.LocalStorageStore();\n      }\n    } else if (options) {\n      this.store = new sessionStore_1.InstanceDataStore(options.sessionOptions);\n    } else {\n      this.store = new sessionStore_1.InstanceDataStore();\n    }\n  }\n  /**\n   * Generates an authentication request and redirects the user to the Blockstack\n   * browser to approve the sign in request.\n   *\n   * Please note that this requires that the web browser properly handles the\n   * `blockstack:` URL protocol handler.\n   *\n   * Most applications should use this\n   * method for sign in unless they require more fine grained control over how the\n   * authentication request is generated. If your app falls into this category,\n   * use [[generateAndStoreTransitKey]], [[makeAuthRequest]],\n   * and [[redirectToSignInWithAuthRequest]] to build your own sign in process.\n   *\n   * @param redirectURI Location of your application.\n   * @param manifestURI Location of the manifest.json file\n   * @param scopes Permissions requested by the application. Possible values are\n   *  `store_write` (default) or `publish_data`.\n   *\n   * @returns {void}\n   */\n\n\n  redirectToSignIn(redirectURI, manifestURI, scopes) {\n    const transitKey = this.generateAndStoreTransitKey();\n    const authRequest = this.makeAuthRequest(transitKey, redirectURI, manifestURI, scopes);\n    const authenticatorURL = this.appConfig && this.appConfig.authenticatorURL;\n    return authApp.redirectToSignInWithAuthRequest(authRequest, authenticatorURL);\n  }\n  /**\n   * Redirects the user to the Blockstack browser to approve the sign in request.\n   * To construct a request see the [[makeAuthRequest]] function.\n   *\n   * The user is redirected to the authenticator URL specified in the `AppConfig`\n   * if the `blockstack:` protocol handler is not detected.\n   * Please note that the protocol handler detection does not work on all browsers.\n   *\n   * @param authRequest A request string built by the [[makeAuthRequest]] function\n   * @param blockstackIDHost The ID of the Blockstack Browser application.\n   *\n   */\n\n\n  redirectToSignInWithAuthRequest(authRequest, blockstackIDHost) {\n    authRequest = authRequest || this.makeAuthRequest();\n    const authenticatorURL = blockstackIDHost || this.appConfig && this.appConfig.authenticatorURL;\n    return authApp.redirectToSignInWithAuthRequest(authRequest, authenticatorURL);\n  }\n  /**\n   * Generates an authentication request that can be sent to the Blockstack\n   * browser for the user to approve sign in. This authentication request can\n   * then be used for sign in by passing it to the [[redirectToSignInWithAuthRequest]]\n   * method.\n   *\n   * *Note*: This method should only be used if you want to use a customized authentication\n   * flow. Typically, you'd use [[redirectToSignIn]] which is the default sign in method.\n   *\n   * @param transitKey A HEX encoded transit private key.\n   * @param redirectURI Location to redirect the user to after sign in approval.\n   * @param manifestURI Location of this app's manifest file.\n   * @param scopes The permissions this app is requesting. The default is `store_write`.\n   * @param appDomain The origin of the app.\n   * @param expiresAt The time at which this request is no longer valid.\n   * @param extraParams Any extra parameters to pass to the authenticator. Use this to\n   * pass options that aren't part of the Blockstack authentication specification,\n   * but might be supported by special authenticators.\n   *\n   * @returns {String} the authentication request\n   */\n\n\n  makeAuthRequest(transitKey, redirectURI, manifestURI, scopes, appDomain, expiresAt = utils_1.nextHour().getTime(), extraParams = {}) {\n    const appConfig = this.appConfig;\n\n    if (!appConfig) {\n      throw new errors_1.InvalidStateError('Missing AppConfig');\n    }\n\n    transitKey = transitKey || this.generateAndStoreTransitKey();\n    redirectURI = redirectURI || appConfig.redirectURI();\n    manifestURI = manifestURI || appConfig.manifestURI();\n    scopes = scopes || appConfig.scopes;\n    appDomain = appDomain || appConfig.appDomain;\n    return authMessages.makeAuthRequest(transitKey, redirectURI, manifestURI, scopes, appDomain, expiresAt, extraParams);\n  }\n  /**\n   * Generates a ECDSA keypair to\n   * use as the ephemeral app transit private key\n   * and store in the session.\n   *\n   * @returns {String} the hex encoded private key\n   *\n   */\n\n\n  generateAndStoreTransitKey() {\n    const sessionData = this.store.getSessionData();\n    const transitKey = authMessages.generateTransitKey();\n    sessionData.transitKey = transitKey;\n    this.store.setSessionData(sessionData);\n    return transitKey;\n  }\n  /**\n   * Retrieve the authentication token from the URL query.\n   *\n   * @returns {String} the authentication token if it exists otherwise `null`\n   */\n\n\n  getAuthResponseToken() {\n    return authApp.getAuthResponseToken();\n  }\n  /**\n   * Check if there is a authentication request that hasn't been handled.\n   *\n   * @returns{Boolean} `true` if there is a pending sign in, otherwise `false`\n   */\n\n\n  isSignInPending() {\n    return authApp.isSignInPending();\n  }\n  /**\n   * Check if a user is currently signed in.\n   *\n   * @returns {Boolean} `true` if the user is signed in, `false` if not.\n   */\n\n\n  isUserSignedIn() {\n    return !!this.store.getSessionData().userData;\n  }\n  /**\n   * Try to process any pending sign in request by returning a `Promise` that resolves\n   * to the user data object if the sign in succeeds.\n   *\n   * @param {String} authResponseToken - the signed authentication response token\n   * @returns {Promise} that resolves to the user data object if successful and rejects\n   * if handling the sign in request fails or there was no pending sign in request.\n   */\n\n\n  handlePendingSignIn(authResponseToken = this.getAuthResponseToken()) {\n    const transitKey = this.store.getSessionData().transitKey;\n    const nameLookupURL = this.store.getSessionData().coreNode;\n    return authApp.handlePendingSignIn(nameLookupURL, authResponseToken, transitKey, this);\n  }\n  /**\n   * Retrieves the user data object. The user's profile is stored in the key [[Profile]].\n   *\n   * @returns {Object} User data object.\n   */\n\n\n  loadUserData() {\n    const userData = this.store.getSessionData().userData;\n\n    if (!userData) {\n      throw new errors_1.InvalidStateError('No user data found. Did the user sign in?');\n    }\n\n    return userData;\n  }\n  /**\n   * Sign the user out and optionally redirect to given location.\n   * @param  redirectURL Location to redirect user to after sign out.\n   * Only used in environments with `window` available\n   */\n\n\n  signUserOut(redirectURL) {\n    authApp.signUserOut(redirectURL, this);\n  }\n  /**\n   * Encrypts the data provided with the app public key.\n   * @param {String|Buffer} content  the data to encrypt\n   * @param {String} options.publicKey the hex string of the ECDSA public\n   * key to use for encryption. If not provided, will use user's appPrivateKey.\n   *\n   * @returns {String} Stringified ciphertext object\n   */\n\n\n  encryptContent(content, options) {\n    return storage.encryptContent(content, options, this);\n  }\n  /**\n   * Decrypts data encrypted with `encryptContent` with the\n   * transit private key.\n   * @param {String|Buffer} content - encrypted content.\n   * @param {String} options.privateKey - The hex string of the ECDSA private\n   * key to use for decryption. If not provided, will use user's appPrivateKey.\n   * @returns {String|Buffer} decrypted content.\n   */\n\n\n  decryptContent(content, options) {\n    return storage.decryptContent(content, options, this);\n  }\n  /**\n   * Stores the data provided in the app's data store to to the file specified.\n   * @param {String} path - the path to store the data in\n   * @param {String|Buffer} content - the data to store in the file\n   * @param options a [[PutFileOptions]] object\n   *\n   * @returns {Promise} that resolves if the operation succeed and rejects\n   * if it failed\n   */\n\n\n  putFile(path, content, options) {\n    return storage.putFile(path, content, options, this);\n  }\n  /**\n   * Retrieves the specified file from the app's data store.\n   *\n   * @param {String} path - the path to the file to read\n   * @param {Object} options a [[GetFileOptions]] object\n   *\n   * @returns {Promise} that resolves to the raw data in the file\n   * or rejects with an error\n   */\n\n\n  getFile(path, options) {\n    return storage.getFile(path, options, this);\n  }\n  /**\n   * Get the URL for reading a file from an app's data store.\n   *\n   * @param {String} path - the path to the file to read\n   *\n   * @returns {Promise<string>} that resolves to the URL or rejects with an error\n   */\n\n\n  getFileUrl(path, options) {\n    return storage.getFileUrl(path, options, this);\n  }\n  /**\n   * List the set of files in this application's Gaia storage bucket.\n   *\n   * @param {function} callback - a callback to invoke on each named file that\n   * returns `true` to continue the listing operation or `false` to end it\n   *\n   * @returns {Promise} that resolves to the number of files listed\n   */\n\n\n  listFiles(callback) {\n    return storage.listFiles(callback, this);\n  }\n  /**\n   * Deletes the specified file from the app's data store.\n   * @param path - The path to the file to delete.\n   * @param options - Optional options object.\n   * @param options.wasSigned - Set to true if the file was originally signed\n   * in order for the corresponding signature file to also be deleted.\n   * @returns Resolves when the file has been removed or rejects with an error.\n   */\n\n\n  deleteFile(path, options) {\n    return storage.deleteFile(path, options, this);\n  }\n  /**\n   *  @ignore\n   */\n\n\n  getOrSetLocalGaiaHubConnection() {\n    const sessionData = this.store.getSessionData();\n    const userData = sessionData.userData;\n\n    if (!userData) {\n      throw new errors_1.InvalidStateError('Missing userData');\n    }\n\n    const hubConfig = userData.gaiaHubConfig;\n\n    if (hubConfig) {\n      return Promise.resolve(hubConfig);\n    }\n\n    return this.setLocalGaiaHubConnection();\n  }\n  /**\n   * These two functions are app-specific connections to gaia hub,\n   *   they read the user data object for information on setting up\n   *   a hub connection, and store the hub config to localstorage\n   * @private\n   * @returns {Promise} that resolves to the new gaia hub connection\n   */\n\n\n  setLocalGaiaHubConnection() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const userData = this.loadUserData();\n\n      if (!userData) {\n        throw new errors_1.InvalidStateError('Missing userData');\n      }\n\n      if (!userData.hubUrl) {\n        userData.hubUrl = authConstants_1.BLOCKSTACK_DEFAULT_GAIA_HUB_URL;\n      }\n\n      const gaiaConfig = yield hub_1.connectToGaiaHub(userData.hubUrl, userData.appPrivateKey, userData.gaiaAssociationToken);\n      userData.gaiaHubConfig = gaiaConfig;\n      const sessionData = this.store.getSessionData();\n      sessionData.userData.gaiaHubConfig = gaiaConfig;\n      this.store.setSessionData(sessionData);\n      return gaiaConfig;\n    });\n  }\n\n}\n\nexports.UserSession = UserSession;","map":null,"metadata":{},"sourceType":"script"}