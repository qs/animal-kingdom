{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst cheerio = require(\"cheerio\");\n\nconst service_1 = require(\"./service\");\n\nclass HackerNews extends service_1.Service {\n  static getBaseUrls() {\n    const baseUrls = ['https://news.ycombinator.com/user?id=', 'http://news.ycombinator.com/user?id=', 'news.ycombinator.com/user?id='];\n    return baseUrls;\n  }\n\n  static getProofUrl(proof) {\n    const baseUrls = this.getBaseUrls();\n    const proofUrl = super.prefixScheme(proof.proof_url);\n\n    for (let i = 0; i < baseUrls.length; i++) {\n      if (proofUrl === \"\".concat(baseUrls[i]).concat(proof.identifier)) {\n        return proofUrl;\n      }\n    }\n\n    throw new Error(\"Proof url \".concat(proof.proof_url, \" is not valid for service \").concat(proof.service));\n  }\n\n  static normalizeUrl(proof) {\n    return '';\n  }\n\n  static getProofStatement(searchText) {\n    const $ = cheerio.load(searchText);\n    const tables = $('#hnmain').children().find('table');\n    let statement = '';\n\n    if (tables.length > 0) {\n      tables.each((tableIndex, table) => {\n        const rows = $(table).find('tr');\n\n        if (rows.length > 0) {\n          rows.each((idx, row) => {\n            const heading = $(row).find('td').first().text().trim();\n\n            if (heading === 'about:') {\n              statement = $(row).find('td').last().text().trim();\n            }\n          });\n        }\n      });\n    }\n\n    return statement;\n  }\n\n}\n\nexports.HackerNews = HackerNews;","map":null,"metadata":{},"sourceType":"script"}