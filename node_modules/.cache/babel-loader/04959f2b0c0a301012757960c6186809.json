{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // @ts-ignore: Could not find a declaration file for module\n\nconst inspector = require(\"schema-inspector\");\n\nconst profile_1 = require(\"../profile\");\n\nconst profileTokens_1 = require(\"../profileTokens\");\n\nconst personLegacy_1 = require(\"./personLegacy\");\n\nconst personUtils_1 = require(\"./personUtils\");\n\nconst schemaDefinition = {\n  type: 'object',\n  strict: false,\n  properties: {\n    '@context': {\n      type: 'string',\n      optional: true\n    },\n    '@type': {\n      type: 'string'\n    },\n    '@id': {\n      type: 'string',\n      optional: true\n    },\n    name: {\n      type: 'string',\n      optional: true\n    },\n    givenName: {\n      type: 'string',\n      optional: true\n    },\n    familyName: {\n      type: 'string',\n      optional: true\n    },\n    description: {\n      type: 'string',\n      optional: true\n    },\n    image: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          name: {\n            type: 'string',\n            optional: true\n          },\n          contentUrl: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    website: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          url: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    account: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          service: {\n            type: 'string',\n            optional: true\n          },\n          identifier: {\n            type: 'string',\n            optional: true\n          },\n          proofType: {\n            type: 'string',\n            optional: true\n          },\n          proofUrl: {\n            type: 'string',\n            optional: true\n          },\n          proofMessage: {\n            type: 'string',\n            optional: true\n          },\n          proofSignature: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    worksFor: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          '@id': {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    knows: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          '@id': {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    address: {\n      type: 'object',\n      optional: true,\n      properties: {\n        '@type': {\n          type: 'string'\n        },\n        streetAddress: {\n          type: 'string',\n          optional: true\n        },\n        addressLocality: {\n          type: 'string',\n          optional: true\n        },\n        postalCode: {\n          type: 'string',\n          optional: true\n        },\n        addressCountry: {\n          type: 'string',\n          optional: true\n        }\n      }\n    },\n    birthDate: {\n      type: 'string',\n      optional: true\n    },\n    taxID: {\n      type: 'string',\n      optional: true\n    }\n  }\n};\n/**\n * @ignore\n */\n\nclass Person extends profile_1.Profile {\n  constructor(profile = {}) {\n    super(profile);\n    this._profile = Object.assign({}, {\n      '@type': 'Person'\n    }, this._profile);\n  }\n\n  static validateSchema(profile, strict = false) {\n    schemaDefinition.strict = strict;\n    return inspector.validate(schemaDefinition, profile);\n  }\n\n  static fromToken(token, publicKeyOrAddress = null) {\n    const profile = profileTokens_1.extractProfile(token, publicKeyOrAddress);\n    return new Person(profile);\n  }\n\n  static fromLegacyFormat(legacyProfile) {\n    const profile = personLegacy_1.getPersonFromLegacyFormat(legacyProfile);\n    return new Person(profile);\n  }\n\n  toJSON() {\n    return {\n      profile: this.profile(),\n      name: this.name(),\n      givenName: this.givenName(),\n      familyName: this.familyName(),\n      description: this.description(),\n      avatarUrl: this.avatarUrl(),\n      verifiedAccounts: this.verifiedAccounts(),\n      address: this.address(),\n      birthDate: this.birthDate(),\n      connections: this.connections(),\n      organizations: this.organizations()\n    };\n  }\n\n  profile() {\n    return Object.assign({}, this._profile);\n  }\n\n  name() {\n    return personUtils_1.getName(this.profile());\n  }\n\n  givenName() {\n    return personUtils_1.getGivenName(this.profile());\n  }\n\n  familyName() {\n    return personUtils_1.getFamilyName(this.profile());\n  }\n\n  description() {\n    return personUtils_1.getDescription(this.profile());\n  }\n\n  avatarUrl() {\n    return personUtils_1.getAvatarUrl(this.profile());\n  }\n\n  verifiedAccounts(verifications) {\n    return personUtils_1.getVerifiedAccounts(this.profile(), verifications);\n  }\n\n  address() {\n    return personUtils_1.getAddress(this.profile());\n  }\n\n  birthDate() {\n    return personUtils_1.getBirthDate(this.profile());\n  }\n\n  connections() {\n    return personUtils_1.getConnections(this.profile());\n  }\n\n  organizations() {\n    return personUtils_1.getOrganizations(this.profile());\n  }\n\n}\n\nexports.Person = Person;","map":null,"metadata":{},"sourceType":"script"}